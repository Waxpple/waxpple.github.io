<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><title type="text">Waxapple Code Segment</title><subtitle type="html">Risc V daliy base.</subtitle><updated>2021-07-25T12:08:24+00:00</updated><id>https://waxpple.github.io/</id><link rel="alternate" type="text/html" href="https://waxpple.github.io/"/><link rel="self" type="application/atom+xml" href="https://waxpple.github.io/atom.xml"/><author><name>Waxapple</name><uri>https://waxpple.github.io/</uri><email>a0910618112@gmail.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><generator uri="https://gohugo.io/" version="0.81.0">Hugo</generator><entry><title type="text">[Day11]New toy iCESugar-Pro!</title><link rel="alternate" type="text/html" href="https://waxpple.github.io/posts/day11/"/><id>https://waxpple.github.io/posts/day11/</id><updated>2021-07-25T12:08:18+00:00</updated><published>2021-07-24T21:12:30+08:00</published><author><name>Waxapple</name><uri>https://waxpple.github.io/</uri><email>a0910618112@gmail.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html">iCESugar-pro Offical github site: https://github.com/wuxx/icesugar-pro
Install Project Trellis The FPGA use EPC5 chips from lattice. We can use Trellis+ yosys+ nextpnr to develope our design. https://github.com/SymbiFlow/prjtrellis
This section will takes more than an hour to make it all done.
Install the dependencies for Project Trellis Install Boost 1 2 3 sudo apt-get install libboost-all-dev sudo apt install build-essential libboost-system-dev libboost-thread-dev libboost-program-options-dev libboost-test-dev sudo apt install libboost-filesystem1.</summary><content type="html">&lt;h1 id="icesugar-pro">iCESugar-pro&lt;/h1>
&lt;p>&lt;img src="https://www.muselab-tech.com/content/images/2021/03/iCESugar-pro-1.jpg" alt="iCESugar-pro">
Offical github site: &lt;a href="https://github.com/wuxx/icesugar-pro">https://github.com/wuxx/icesugar-pro&lt;/a>&lt;/p>
&lt;h1 id="install-project-trellis">Install Project Trellis&lt;/h1>
&lt;p>The FPGA use EPC5 chips from lattice. We can use Trellis+ yosys+ nextpnr to develope our design.
&lt;a href="https://github.com/SymbiFlow/prjtrellis">https://github.com/SymbiFlow/prjtrellis&lt;/a>&lt;/p>
&lt;p>This section will takes more than an hour to make it all done.&lt;/p>
&lt;h2 id="install-the-dependencies-for-project-trellis">Install the dependencies for Project Trellis&lt;/h2>
&lt;h3 id="install-boost">Install Boost&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo apt-get install libboost-all-dev
sudo apt install build-essential libboost-system-dev libboost-thread-dev libboost-program-options-dev libboost-test-dev
sudo apt install libboost-filesystem1.71-dev
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="install-cmake">Install cmake&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo apt install cmake
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="install-gcc-9">Install gcc-9&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo apt install gcc-9
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="install-eigen3">Install Eigen3&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo apt-get install libeigen3-dev
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="install-project-trellis-1">Install Project trellis&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash"> git clone --recursive https://github.com/YosysHQ/prjtrellis
&lt;span class="nb">cd&lt;/span> prjtrellis/libtrellis
cmake -DCMAKE_INSTALL_PREFIX&lt;span class="o">=&lt;/span>/usr .
make
sudo make install
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="install-nextpnr">Install nextpnr&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">git clone https://github.com/YosysHQ/nextpnr
&lt;span class="nb">cd&lt;/span> nextpnr
cmake . -DARCH&lt;span class="o">=&lt;/span>ecp5 -DTRELLIS_INSTALL_PREFIX&lt;span class="o">=&lt;/span>/usr .
make -j&lt;span class="k">$(&lt;/span>nproc&lt;span class="k">)&lt;/span>
sudo make install
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This step takes long time to make, especially large ram usage. If failed, you can see &lt;a href="https://github.com/YosysHQ/nextpnr/issues/115">https://github.com/YosysHQ/nextpnr/issues/115&lt;/a> for more detailed build information.&lt;/p>
&lt;h1 id="build-a-program-for-fpgas">Build a program for FPGAs&lt;/h1>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">os&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">subprocess&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">typing&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">List&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Elaboratable&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Signal&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen.build&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="o">*&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen.build.run&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">LocalBuildProducts&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen.cli&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">main_parser&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">main_runner&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen.vendor.lattice_ecp5&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="o">*&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Blinker&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Elaboratable&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">pass&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">elaborate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">platform&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Platform&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">led&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">platform&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;led&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">timer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sync&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">timer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">timer&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">led&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">timer&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">m&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">ports&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Signal&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Board&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">LatticeECP5Platform&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">device&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;LFE5U-25F&amp;#34;&lt;/span>
&lt;span class="n">package&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;BG256&amp;#34;&lt;/span>
&lt;span class="n">speed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;6&amp;#34;&lt;/span>
&lt;span class="n">default_clk&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;clk1&amp;#34;&lt;/span>
&lt;span class="n">default_rst&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;rst&amp;#34;&lt;/span>
&lt;span class="n">resources&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="n">Resource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;clk1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Pins&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;P6&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;i&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">Clock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">25e6&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">Attrs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IO_TYPE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;LVCMOS33&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Resource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;rst&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Pins&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;L14&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;i&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">Attrs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IO_TYPE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;LVCMOS33&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Resource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;led&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Pins&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;B11&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;o&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">Attrs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IO_TYPE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;LVCMOS33&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="n">connectors&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">toolchain_program&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">products&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">iceprog&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">environ&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;ICEPROG&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;iceprog&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">products&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">extract&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;{}.bin&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">bitstream_filename&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">subprocess&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">check_call&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">iceprog&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bitstream_filename&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">Board&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">build&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Blinker&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">do_program&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="bp">False&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>Note: In EPC5, IO_STANDARD is IO_TYPE and GLOBAL is not used.&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>python3 blinky.py
&lt;/code>&lt;/pre>&lt;h1 id="yosys-report">Yosys report&lt;/h1>
&lt;p>In the build folder under python file directory, here is the tree structure.
&lt;img src="https://i.imgur.com/W3ykQRW.gif" alt="Imgur">&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">.
├── build_top.bat
├── build_top.sh
├── top.bit
├── top.config
├── top.debug.v
├── top.il
├── top.json
├── top.lpf
├── top.rpt
├── top.svf
├── top.tim
└── top.ys
&lt;span class="m">0&lt;/span> directories, &lt;span class="m">12&lt;/span> files
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In &lt;code>top.rpt&lt;/code>, you can see the report for FPGA utilization.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="o">===&lt;/span> &lt;span class="nv">top&lt;/span> &lt;span class="o">===&lt;/span>
Number of wires: &lt;span class="m">23&lt;/span>
Number of wire bits: &lt;span class="m">99&lt;/span>
Number of public wires: &lt;span class="m">23&lt;/span>
Number of public wire bits: &lt;span class="m">99&lt;/span>
Number of memories: &lt;span class="m">0&lt;/span>
Number of memory bits: &lt;span class="m">0&lt;/span>
Number of processes: &lt;span class="m">0&lt;/span>
Number of cells: &lt;span class="m">37&lt;/span>
CCU2C &lt;span class="m">10&lt;/span>
LUT4 &lt;span class="m">1&lt;/span>
SGSR &lt;span class="m">1&lt;/span>
TRELLIS_FF &lt;span class="m">22&lt;/span>
TRELLIS_IO &lt;span class="m">3&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The number of cells is not nessecarily relevant to the code quality. Maybe you change something that you don&amp;rsquo;t think it will impact any design but it does. There is some randomness in synthesis.&lt;/p>
&lt;p>In &lt;code>top.tim&lt;/code>, you can check timing.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;span class="lnt">105
&lt;/span>&lt;span class="lnt">106
&lt;/span>&lt;span class="lnt">107
&lt;/span>&lt;span class="lnt">108
&lt;/span>&lt;span class="lnt">109
&lt;/span>&lt;span class="lnt">110
&lt;/span>&lt;span class="lnt">111
&lt;/span>&lt;span class="lnt">112
&lt;/span>&lt;span class="lnt">113
&lt;/span>&lt;span class="lnt">114
&lt;/span>&lt;span class="lnt">115
&lt;/span>&lt;span class="lnt">116
&lt;/span>&lt;span class="lnt">117
&lt;/span>&lt;span class="lnt">118
&lt;/span>&lt;span class="lnt">119
&lt;/span>&lt;span class="lnt">120
&lt;/span>&lt;span class="lnt">121
&lt;/span>&lt;span class="lnt">122
&lt;/span>&lt;span class="lnt">123
&lt;/span>&lt;span class="lnt">124
&lt;/span>&lt;span class="lnt">125
&lt;/span>&lt;span class="lnt">126
&lt;/span>&lt;span class="lnt">127
&lt;/span>&lt;span class="lnt">128
&lt;/span>&lt;span class="lnt">129
&lt;/span>&lt;span class="lnt">130
&lt;/span>&lt;span class="lnt">131
&lt;/span>&lt;span class="lnt">132
&lt;/span>&lt;span class="lnt">133
&lt;/span>&lt;span class="lnt">134
&lt;/span>&lt;span class="lnt">135
&lt;/span>&lt;span class="lnt">136
&lt;/span>&lt;span class="lnt">137
&lt;/span>&lt;span class="lnt">138
&lt;/span>&lt;span class="lnt">139
&lt;/span>&lt;span class="lnt">140
&lt;/span>&lt;span class="lnt">141
&lt;/span>&lt;span class="lnt">142
&lt;/span>&lt;span class="lnt">143
&lt;/span>&lt;span class="lnt">144
&lt;/span>&lt;span class="lnt">145
&lt;/span>&lt;span class="lnt">146
&lt;/span>&lt;span class="lnt">147
&lt;/span>&lt;span class="lnt">148
&lt;/span>&lt;span class="lnt">149
&lt;/span>&lt;span class="lnt">150
&lt;/span>&lt;span class="lnt">151
&lt;/span>&lt;span class="lnt">152
&lt;/span>&lt;span class="lnt">153
&lt;/span>&lt;span class="lnt">154
&lt;/span>&lt;span class="lnt">155
&lt;/span>&lt;span class="lnt">156
&lt;/span>&lt;span class="lnt">157
&lt;/span>&lt;span class="lnt">158
&lt;/span>&lt;span class="lnt">159
&lt;/span>&lt;span class="lnt">160
&lt;/span>&lt;span class="lnt">161
&lt;/span>&lt;span class="lnt">162
&lt;/span>&lt;span class="lnt">163
&lt;/span>&lt;span class="lnt">164
&lt;/span>&lt;span class="lnt">165
&lt;/span>&lt;span class="lnt">166
&lt;/span>&lt;span class="lnt">167
&lt;/span>&lt;span class="lnt">168
&lt;/span>&lt;span class="lnt">169
&lt;/span>&lt;span class="lnt">170
&lt;/span>&lt;span class="lnt">171
&lt;/span>&lt;span class="lnt">172
&lt;/span>&lt;span class="lnt">173
&lt;/span>&lt;span class="lnt">174
&lt;/span>&lt;span class="lnt">175
&lt;/span>&lt;span class="lnt">176
&lt;/span>&lt;span class="lnt">177
&lt;/span>&lt;span class="lnt">178
&lt;/span>&lt;span class="lnt">179
&lt;/span>&lt;span class="lnt">180
&lt;/span>&lt;span class="lnt">181
&lt;/span>&lt;span class="lnt">182
&lt;/span>&lt;span class="lnt">183
&lt;/span>&lt;span class="lnt">184
&lt;/span>&lt;span class="lnt">185
&lt;/span>&lt;span class="lnt">186
&lt;/span>&lt;span class="lnt">187
&lt;/span>&lt;span class="lnt">188
&lt;/span>&lt;span class="lnt">189
&lt;/span>&lt;span class="lnt">190
&lt;/span>&lt;span class="lnt">191
&lt;/span>&lt;span class="lnt">192
&lt;/span>&lt;span class="lnt">193
&lt;/span>&lt;span class="lnt">194
&lt;/span>&lt;span class="lnt">195
&lt;/span>&lt;span class="lnt">196
&lt;/span>&lt;span class="lnt">197
&lt;/span>&lt;span class="lnt">198
&lt;/span>&lt;span class="lnt">199
&lt;/span>&lt;span class="lnt">200
&lt;/span>&lt;span class="lnt">201
&lt;/span>&lt;span class="lnt">202
&lt;/span>&lt;span class="lnt">203
&lt;/span>&lt;span class="lnt">204
&lt;/span>&lt;span class="lnt">205
&lt;/span>&lt;span class="lnt">206
&lt;/span>&lt;span class="lnt">207
&lt;/span>&lt;span class="lnt">208
&lt;/span>&lt;span class="lnt">209
&lt;/span>&lt;span class="lnt">210
&lt;/span>&lt;span class="lnt">211
&lt;/span>&lt;span class="lnt">212
&lt;/span>&lt;span class="lnt">213
&lt;/span>&lt;span class="lnt">214
&lt;/span>&lt;span class="lnt">215
&lt;/span>&lt;span class="lnt">216
&lt;/span>&lt;span class="lnt">217
&lt;/span>&lt;span class="lnt">218
&lt;/span>&lt;span class="lnt">219
&lt;/span>&lt;span class="lnt">220
&lt;/span>&lt;span class="lnt">221
&lt;/span>&lt;span class="lnt">222
&lt;/span>&lt;span class="lnt">223
&lt;/span>&lt;span class="lnt">224
&lt;/span>&lt;span class="lnt">225
&lt;/span>&lt;span class="lnt">226
&lt;/span>&lt;span class="lnt">227
&lt;/span>&lt;span class="lnt">228
&lt;/span>&lt;span class="lnt">229
&lt;/span>&lt;span class="lnt">230
&lt;/span>&lt;span class="lnt">231
&lt;/span>&lt;span class="lnt">232
&lt;/span>&lt;span class="lnt">233
&lt;/span>&lt;span class="lnt">234
&lt;/span>&lt;span class="lnt">235
&lt;/span>&lt;span class="lnt">236
&lt;/span>&lt;span class="lnt">237
&lt;/span>&lt;span class="lnt">238
&lt;/span>&lt;span class="lnt">239
&lt;/span>&lt;span class="lnt">240
&lt;/span>&lt;span class="lnt">241
&lt;/span>&lt;span class="lnt">242
&lt;/span>&lt;span class="lnt">243
&lt;/span>&lt;span class="lnt">244
&lt;/span>&lt;span class="lnt">245
&lt;/span>&lt;span class="lnt">246
&lt;/span>&lt;span class="lnt">247
&lt;/span>&lt;span class="lnt">248
&lt;/span>&lt;span class="lnt">249
&lt;/span>&lt;span class="lnt">250
&lt;/span>&lt;span class="lnt">251
&lt;/span>&lt;span class="lnt">252
&lt;/span>&lt;span class="lnt">253
&lt;/span>&lt;span class="lnt">254
&lt;/span>&lt;span class="lnt">255
&lt;/span>&lt;span class="lnt">256
&lt;/span>&lt;span class="lnt">257
&lt;/span>&lt;span class="lnt">258
&lt;/span>&lt;span class="lnt">259
&lt;/span>&lt;span class="lnt">260
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">Info: constraining clock net &lt;span class="s1">&amp;#39;clk1_0__io&amp;#39;&lt;/span> to 25.00 MHz
Info: Logic utilisation before packing:
Info: Total LUT4s: 21/24288 0%
Info: logic LUTs: 1/24288 0%
Info: carry LUTs: 20/24288 0%
Info: RAM LUTs: 0/12144 0%
Info: RAMW LUTs: 0/ &lt;span class="m">6072&lt;/span> 0%
Info: Total DFFs: 44/24288 0%
Info: Packing IOs..
Info: rst_0__io feeds TRELLIS_IO pin_rst_0.rst_0_0, removing &lt;span class="nv">$nextpnr_ibuf&lt;/span> rst_0__io.
Info: pin &lt;span class="s1">&amp;#39;pin_rst_0.rst_0_0&amp;#39;&lt;/span> constrained to Bel &lt;span class="s1">&amp;#39;X72/Y32/PIOC&amp;#39;&lt;/span>.
Info: led_0__io feeds TRELLIS_IO pin_led_0.led_0_0, removing &lt;span class="nv">$nextpnr_obuf&lt;/span> led_0__io.
Info: pin &lt;span class="s1">&amp;#39;pin_led_0.led_0_0&amp;#39;&lt;/span> constrained to Bel &lt;span class="s1">&amp;#39;X49/Y0/PIOA&amp;#39;&lt;/span>.
Info: clk1_0__io feeds TRELLIS_IO pin_clk1_0.clk1_0_0, removing &lt;span class="nv">$nextpnr_ibuf&lt;/span> clk1_0__io.
Info: pin &lt;span class="s1">&amp;#39;pin_clk1_0.clk1_0_0&amp;#39;&lt;/span> constrained to Bel &lt;span class="s1">&amp;#39;X0/Y47/PIOC&amp;#39;&lt;/span>.
Info: Packing constants..
Info: Packing carries...
Info: Finding LUTFF pairs...
Info: Packing LUT5-7s...
Info: Finding LUT-LUT pairs...
Info: Packing paired LUTs into a SLICE...
Info: Packing unpaired LUTs into a SLICE...
Info: Packing unpaired FFs into a SLICE...
Info: Generating derived timing constraints...
Info: Promoting globals...
Info: promoting clock net cd_sync_clk1_0__i to global network
Info: Checksum: 0xd8bc23f8
Info: Annotating ports with timing budgets &lt;span class="k">for&lt;/span> target frequency 12.00 MHz
Info: Checksum: 0x2027cd80
Info: Device utilisation:
Info: TRELLIS_SLICE: 16/12144 0%
Info: TRELLIS_IO: 3/ &lt;span class="m">197&lt;/span> 1%
Info: DCCA: 1/ &lt;span class="m">56&lt;/span> 1%
Info: DP16KD: 0/ &lt;span class="m">56&lt;/span> 0%
Info: MULT18X18D: 0/ &lt;span class="m">28&lt;/span> 0%
Info: ALU54B: 0/ &lt;span class="m">14&lt;/span> 0%
Info: EHXPLLL: 0/ &lt;span class="m">2&lt;/span> 0%
Info: EXTREFB: 0/ &lt;span class="m">1&lt;/span> 0%
Info: DCUA: 0/ &lt;span class="m">1&lt;/span> 0%
Info: PCSCLKDIV: 0/ &lt;span class="m">2&lt;/span> 0%
Info: IOLOGIC: 0/ &lt;span class="m">128&lt;/span> 0%
Info: SIOLOGIC: 0/ &lt;span class="m">69&lt;/span> 0%
Info: GSR: 1/ &lt;span class="m">1&lt;/span> 100%
Info: JTAGG: 0/ &lt;span class="m">1&lt;/span> 0%
Info: OSCG: 0/ &lt;span class="m">1&lt;/span> 0%
Info: SEDGA: 0/ &lt;span class="m">1&lt;/span> 0%
Info: DTR: 0/ &lt;span class="m">1&lt;/span> 0%
Info: USRMCLK: 0/ &lt;span class="m">1&lt;/span> 0%
Info: CLKDIVF: 0/ &lt;span class="m">4&lt;/span> 0%
Info: ECLKSYNCB: 0/ &lt;span class="m">10&lt;/span> 0%
Info: DLLDELD: 0/ &lt;span class="m">8&lt;/span> 0%
Info: DDRDLL: 0/ &lt;span class="m">4&lt;/span> 0%
Info: DQSBUFM: 0/ &lt;span class="m">8&lt;/span> 0%
Info: TRELLIS_ECLKBUF: 0/ &lt;span class="m">8&lt;/span> 0%
Info: ECLKBRIDGECS: 0/ &lt;span class="m">2&lt;/span> 0%
Info: DCSC: 0/ &lt;span class="m">2&lt;/span> 0%
Info: Placed &lt;span class="m">4&lt;/span> cells based on constraints.
Info: Creating initial analytic placement &lt;span class="k">for&lt;/span> &lt;span class="m">4&lt;/span> cells, random placement &lt;span class="nv">wirelen&lt;/span> &lt;span class="o">=&lt;/span> 272.
Info: at initial placer iter 0, &lt;span class="nv">wirelen&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">112&lt;/span>
Info: at initial placer iter 1, &lt;span class="nv">wirelen&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">112&lt;/span>
Info: at initial placer iter 2, &lt;span class="nv">wirelen&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">112&lt;/span>
Info: at initial placer iter 3, &lt;span class="nv">wirelen&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">112&lt;/span>
Info: Running main analytical placer.
Info: at iteration &lt;span class="c1">#1, type TRELLIS_SLICE: wirelen solved = 112, spread = 114, legal = 119; time = 0.00s&lt;/span>
Info: HeAP Placer Time: 0.01s
Info: of which solving equations: 0.00s
Info: of which spreading cells: 0.00s
Info: of which strict legalisation: 0.00s
Info: Running simulated annealing placer &lt;span class="k">for&lt;/span> refinement.
Info: at iteration &lt;span class="c1">#1: temp = 0.000000, timing cost = 9, wirelen = 119&lt;/span>
Info: at iteration &lt;span class="c1">#3: temp = 0.000000, timing cost = 9, wirelen = 115&lt;/span>
Info: SA placement &lt;span class="nb">time&lt;/span> 0.00s
Info: Max frequency &lt;span class="k">for&lt;/span> clock &lt;span class="s1">&amp;#39;$glbnet$cd_sync_clk1_0__i&amp;#39;&lt;/span>: 289.52 MHz &lt;span class="o">(&lt;/span>PASS at 25.00 MHz&lt;span class="o">)&lt;/span>
Info: Max delay &amp;lt;async&amp;gt; -&amp;gt; &amp;lt;async&amp;gt; : 4.68 ns
Info: Max delay &amp;lt;async&amp;gt; -&amp;gt; posedge &lt;span class="nv">$glbnet$cd_sync_clk1_0__i&lt;/span>: 8.64 ns
Info: Max delay posedge &lt;span class="nv">$glbnet$cd_sync_clk1_0__i&lt;/span> -&amp;gt; &amp;lt;async&amp;gt; : 6.41 ns
Info: Slack histogram:
Info: legend: * represents &lt;span class="m">1&lt;/span> endpoint&lt;span class="o">(&lt;/span>s&lt;span class="o">)&lt;/span>
Info: + represents &lt;span class="o">[&lt;/span>1,1&lt;span class="o">)&lt;/span> endpoint&lt;span class="o">(&lt;/span>s&lt;span class="o">)&lt;/span>
Info: &lt;span class="o">[&lt;/span> 31364, 33877&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span>*
Info: &lt;span class="o">[&lt;/span> 33877, 36390&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span>
Info: &lt;span class="o">[&lt;/span> 36390, 38903&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span>*********************
Info: &lt;span class="o">[&lt;/span> 38903, 41416&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span>
Info: &lt;span class="o">[&lt;/span> 41416, 43929&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span>
Info: &lt;span class="o">[&lt;/span> 43929, 46442&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span>
Info: &lt;span class="o">[&lt;/span> 46442, 48955&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span>
Info: &lt;span class="o">[&lt;/span> 48955, 51468&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span>
Info: &lt;span class="o">[&lt;/span> 51468, 53981&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span>
Info: &lt;span class="o">[&lt;/span> 53981, 56494&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span>
Info: &lt;span class="o">[&lt;/span> 56494, 59007&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span>
Info: &lt;span class="o">[&lt;/span> 59007, 61520&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span>
Info: &lt;span class="o">[&lt;/span> 61520, 64033&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span>
Info: &lt;span class="o">[&lt;/span> 64033, 66546&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span>
Info: &lt;span class="o">[&lt;/span> 66546, 69059&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span>
Info: &lt;span class="o">[&lt;/span> 69059, 71572&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span>
Info: &lt;span class="o">[&lt;/span> 71572, 74085&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span>
Info: &lt;span class="o">[&lt;/span> 74085, 76598&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span>
Info: &lt;span class="o">[&lt;/span> 76598, 79111&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span>**
Info: &lt;span class="o">[&lt;/span> 79111, 81624&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span>*
Info: Checksum: 0x607e8c2f
Info: Routing globals...
Info: routing clock net &lt;span class="nv">$glbnet$cd_sync_clk1_0__i&lt;/span> using global &lt;span class="m">0&lt;/span>
Info: Routing..
Info: Setting up routing queue.
Info: Routing &lt;span class="m">58&lt;/span> arcs.
Info: &lt;span class="p">|&lt;/span> &lt;span class="o">(&lt;/span>re-&lt;span class="o">)&lt;/span>routed arcs &lt;span class="p">|&lt;/span> delta &lt;span class="p">|&lt;/span> remaining&lt;span class="p">|&lt;/span> &lt;span class="nb">time&lt;/span> spent &lt;span class="p">|&lt;/span>
Info: IterCnt &lt;span class="p">|&lt;/span> w/ripup wo/ripup &lt;span class="p">|&lt;/span> w/r wo/r &lt;span class="p">|&lt;/span> arcs&lt;span class="p">|&lt;/span> batch&lt;span class="o">(&lt;/span>sec&lt;span class="o">)&lt;/span> total&lt;span class="o">(&lt;/span>sec&lt;span class="o">)&lt;/span>&lt;span class="p">|&lt;/span>
Info: &lt;span class="m">58&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">58&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">58&lt;/span> &lt;span class="p">|&lt;/span> 0&lt;span class="p">|&lt;/span> 0.02 0.02&lt;span class="p">|&lt;/span>
Info: Routing complete.
Info: Router1 &lt;span class="nb">time&lt;/span> 0.02s
Info: Checksum: 0xe0791b74
Info: Critical path report &lt;span class="k">for&lt;/span> clock &lt;span class="s1">&amp;#39;$glbnet$cd_sync_clk1_0__i&amp;#39;&lt;/span> &lt;span class="o">(&lt;/span>posedge -&amp;gt; posedge&lt;span class="o">)&lt;/span>:
Info: curr total
Info: 0.5 0.5 Source timer&lt;span class="nv">$next_CCU2C_S0_9$CCU2_SLICE&lt;/span>.Q0
Info: 0.8 1.3 Net timer&lt;span class="o">[&lt;/span>0&lt;span class="o">]&lt;/span> budget 18.993000 ns &lt;span class="o">(&lt;/span>47,2&lt;span class="o">)&lt;/span> -&amp;gt; &lt;span class="o">(&lt;/span>47,2&lt;span class="o">)&lt;/span>
Info: Sink timer&lt;span class="nv">$next_CCU2C_S0_9$CCU2_SLICE&lt;/span>.B0
Info: Defined in:
Info: blinky.py:18
Info: /usr/local/bin/../share/yosys/ecp5/arith_map.v:63.22-63.23
Info: 0.4 1.8 Source timer&lt;span class="nv">$next_CCU2C_S0_9$CCU2_SLICE&lt;/span>.FCO
Info: 0.0 1.8 Net timer&lt;span class="nv">$next_CCU2C_S0_4_COUT&lt;/span>&lt;span class="o">[&lt;/span>1&lt;span class="o">]&lt;/span> budget 0.000000 ns &lt;span class="o">(&lt;/span>47,2&lt;span class="o">)&lt;/span> -&amp;gt; &lt;span class="o">(&lt;/span>47,2&lt;span class="o">)&lt;/span>
Info: Sink timer&lt;span class="nv">$next_CCU2C_S0_3$CCU2_SLICE&lt;/span>.FCI
Info: Defined in:
Info: blinky.py:18
Info: /usr/local/bin/../share/yosys/ecp5/arith_map.v:63.22-63.23
Info: 0.1 1.9 Source timer&lt;span class="nv">$next_CCU2C_S0_3$CCU2_SLICE&lt;/span>.FCO
Info: 0.0 1.9 Net timer&lt;span class="nv">$next_CCU2C_S0_4_COUT&lt;/span>&lt;span class="o">[&lt;/span>3&lt;span class="o">]&lt;/span> budget 0.000000 ns &lt;span class="o">(&lt;/span>47,2&lt;span class="o">)&lt;/span> -&amp;gt; &lt;span class="o">(&lt;/span>47,2&lt;span class="o">)&lt;/span>
Info: Sink timer&lt;span class="nv">$next_CCU2C_S0_2$CCU2_SLICE&lt;/span>.FCI
Info: Defined in:
Info: blinky.py:18
Info: /usr/local/bin/../share/yosys/ecp5/arith_map.v:63.22-63.23
Info: 0.1 1.9 Source timer&lt;span class="nv">$next_CCU2C_S0_2$CCU2_SLICE&lt;/span>.FCO
Info: 0.0 1.9 Net timer&lt;span class="nv">$next_CCU2C_S0_4_COUT&lt;/span>&lt;span class="o">[&lt;/span>5&lt;span class="o">]&lt;/span> budget 0.000000 ns &lt;span class="o">(&lt;/span>47,2&lt;span class="o">)&lt;/span> -&amp;gt; &lt;span class="o">(&lt;/span>48,2&lt;span class="o">)&lt;/span>
Info: Sink timer&lt;span class="nv">$next_CCU2C_S0_1$CCU2_SLICE&lt;/span>.FCI
Info: Defined in:
Info: blinky.py:18
Info: /usr/local/bin/../share/yosys/ecp5/arith_map.v:63.22-63.23
Info: 0.1 2.0 Source timer&lt;span class="nv">$next_CCU2C_S0_1$CCU2_SLICE&lt;/span>.FCO
Info: 0.0 2.0 Net timer&lt;span class="nv">$next_CCU2C_S0_4_COUT&lt;/span>&lt;span class="o">[&lt;/span>7&lt;span class="o">]&lt;/span> budget 0.000000 ns &lt;span class="o">(&lt;/span>48,2&lt;span class="o">)&lt;/span> -&amp;gt; &lt;span class="o">(&lt;/span>48,2&lt;span class="o">)&lt;/span>
Info: Sink timer&lt;span class="nv">$next_CCU2C_S0$CCU2_SLICE&lt;/span>.FCI
Info: Defined in:
Info: blinky.py:18
Info: /usr/local/bin/../share/yosys/ecp5/arith_map.v:63.22-63.23
Info: 0.1 2.1 Source timer&lt;span class="nv">$next_CCU2C_S0$CCU2_SLICE&lt;/span>.FCO
Info: 0.0 2.1 Net timer&lt;span class="nv">$next_CCU2C_S0_4_COUT&lt;/span>&lt;span class="o">[&lt;/span>9&lt;span class="o">]&lt;/span> budget 0.000000 ns &lt;span class="o">(&lt;/span>48,2&lt;span class="o">)&lt;/span> -&amp;gt; &lt;span class="o">(&lt;/span>48,2&lt;span class="o">)&lt;/span>
Info: Sink timer&lt;span class="nv">$next_CCU2C_S0_8$CCU2_SLICE&lt;/span>.FCI
Info: Defined in:
Info: blinky.py:18
Info: /usr/local/bin/../share/yosys/ecp5/arith_map.v:63.22-63.23
Info: 0.1 2.2 Source timer&lt;span class="nv">$next_CCU2C_S0_8$CCU2_SLICE&lt;/span>.FCO
Info: 0.0 2.2 Net timer&lt;span class="nv">$next_CCU2C_S0_4_COUT&lt;/span>&lt;span class="o">[&lt;/span>11&lt;span class="o">]&lt;/span> budget 0.000000 ns &lt;span class="o">(&lt;/span>48,2&lt;span class="o">)&lt;/span> -&amp;gt; &lt;span class="o">(&lt;/span>48,2&lt;span class="o">)&lt;/span>
Info: Sink timer&lt;span class="nv">$next_CCU2C_S0_7$CCU2_SLICE&lt;/span>.FCI
Info: Defined in:
Info: blinky.py:18
Info: /usr/local/bin/../share/yosys/ecp5/arith_map.v:63.22-63.23
Info: 0.1 2.2 Source timer&lt;span class="nv">$next_CCU2C_S0_7$CCU2_SLICE&lt;/span>.FCO
Info: 0.0 2.2 Net timer&lt;span class="nv">$next_CCU2C_S0_4_COUT&lt;/span>&lt;span class="o">[&lt;/span>13&lt;span class="o">]&lt;/span> budget 0.000000 ns &lt;span class="o">(&lt;/span>48,2&lt;span class="o">)&lt;/span> -&amp;gt; &lt;span class="o">(&lt;/span>49,2&lt;span class="o">)&lt;/span>
Info: Sink timer&lt;span class="nv">$next_CCU2C_S0_6$CCU2_SLICE&lt;/span>.FCI
Info: Defined in:
Info: blinky.py:18
Info: /usr/local/bin/../share/yosys/ecp5/arith_map.v:63.22-63.23
Info: 0.1 2.3 Source timer&lt;span class="nv">$next_CCU2C_S0_6$CCU2_SLICE&lt;/span>.FCO
Info: 0.0 2.3 Net timer&lt;span class="nv">$next_CCU2C_S0_4_COUT&lt;/span>&lt;span class="o">[&lt;/span>15&lt;span class="o">]&lt;/span> budget 0.000000 ns &lt;span class="o">(&lt;/span>49,2&lt;span class="o">)&lt;/span> -&amp;gt; &lt;span class="o">(&lt;/span>49,2&lt;span class="o">)&lt;/span>
Info: Sink timer&lt;span class="nv">$next_CCU2C_S0_5$CCU2_SLICE&lt;/span>.FCI
Info: Defined in:
Info: blinky.py:18
Info: /usr/local/bin/../share/yosys/ecp5/arith_map.v:63.22-63.23
Info: 0.1 2.4 Source timer&lt;span class="nv">$next_CCU2C_S0_5$CCU2_SLICE&lt;/span>.FCO
Info: 0.0 2.4 Net timer&lt;span class="nv">$next_CCU2C_S0_4_COUT&lt;/span>&lt;span class="o">[&lt;/span>17&lt;span class="o">]&lt;/span> budget 0.000000 ns &lt;span class="o">(&lt;/span>49,2&lt;span class="o">)&lt;/span> -&amp;gt; &lt;span class="o">(&lt;/span>49,2&lt;span class="o">)&lt;/span>
Info: Sink timer&lt;span class="nv">$next_CCU2C_S0_4$CCU2_SLICE&lt;/span>.FCI
Info: Defined in:
Info: blinky.py:18
Info: /usr/local/bin/../share/yosys/ecp5/arith_map.v:63.22-63.23
Info: 0.4 2.8 Source timer&lt;span class="nv">$next_CCU2C_S0_4$CCU2_SLICE&lt;/span>.F0
Info: 0.1 2.9 Net timer&lt;span class="nv">$next&lt;/span>&lt;span class="o">[&lt;/span>18&lt;span class="o">]&lt;/span> budget 19.007999 ns &lt;span class="o">(&lt;/span>49,2&lt;span class="o">)&lt;/span> -&amp;gt; &lt;span class="o">(&lt;/span>49,2&lt;span class="o">)&lt;/span>
Info: Sink timer&lt;span class="nv">$next_CCU2C_S0_4$CCU2_SLICE&lt;/span>.DI0
Info: Defined in:
Info: blinky.py:15
Info: 0.0 2.9 Setup timer&lt;span class="nv">$next_CCU2C_S0_4$CCU2_SLICE&lt;/span>.DI0
Info: 2.0 ns logic, 1.0 ns routing
Info: Critical path report &lt;span class="k">for&lt;/span> cross-domain path &lt;span class="s1">&amp;#39;&amp;lt;async&amp;gt;&amp;#39;&lt;/span> -&amp;gt; &lt;span class="s1">&amp;#39;&amp;lt;async&amp;gt;&amp;#39;&lt;/span>:
Info: curr total
Info: 0.0 0.0 Source pin_clk1_0.clk1_0_0.O
Info: 1.7 1.7 Net cd_sync_clk1_0__i budget 41.667000 ns &lt;span class="o">(&lt;/span>0,47&lt;span class="o">)&lt;/span> -&amp;gt; &lt;span class="o">(&lt;/span>3,25&lt;span class="o">)&lt;/span>
Info: Sink &lt;span class="nv">$gbuf$cd_sync_clk1_0__i&lt;/span>.CLKI
Info: Defined in:
Info: /home/waxapple/.local/lib/python3.8/site-packages/nmigen/build/res.py:137
Info: 0.0 1.7 Source &lt;span class="nv">$gbuf$cd_sync_clk1_0__i&lt;/span>.CLKO
Info: 0.0 1.7 Net &lt;span class="nv">$glbnet$cd_sync_clk1_0__i&lt;/span> budget 41.666000 ns &lt;span class="o">(&lt;/span>3,25&lt;span class="o">)&lt;/span> -&amp;gt; &lt;span class="o">(&lt;/span>4,49&lt;span class="o">)&lt;/span>
Info: Sink cd_sync.U&lt;span class="nv">$$&lt;/span>2.CLK
Info: 0.0 ns logic, 1.7 ns routing
Info: Critical path report &lt;span class="k">for&lt;/span> cross-domain path &lt;span class="s1">&amp;#39;&amp;lt;async&amp;gt;&amp;#39;&lt;/span> -&amp;gt; &lt;span class="s1">&amp;#39;posedge $glbnet$cd_sync_clk1_0__i&amp;#39;&lt;/span>:
Info: curr total
Info: 0.0 0.0 Source pin_rst_0.rst_0_0.O
Info: 3.1 3.1 Net cd_sync_rst_0__i budget 19.882000 ns &lt;span class="o">(&lt;/span>72,32&lt;span class="o">)&lt;/span> -&amp;gt; &lt;span class="o">(&lt;/span>21,33&lt;span class="o">)&lt;/span>
Info: Sink cd_sync.rst_0__i_LUT4_D_SLICE.D1
Info: Defined in:
Info: /home/waxapple/.local/lib/python3.8/site-packages/nmigen/build/res.py:137
Info: 0.2 3.3 Source cd_sync.rst_0__i_LUT4_D_SLICE.F1
Info: 0.1 3.5 Net cd_sync.U&lt;span class="nv">$$&lt;/span>0_DI budget 19.882000 ns &lt;span class="o">(&lt;/span>21,33&lt;span class="o">)&lt;/span> -&amp;gt; &lt;span class="o">(&lt;/span>21,33&lt;span class="o">)&lt;/span>
Info: Sink cd_sync.rst_0__i_LUT4_D_SLICE.DI1
Info: Defined in:
Info: /home/waxapple/.local/lib/python3.8/site-packages/nmigen/vendor/lattice_ecp5.py:334
Info: 0.0 3.5 Setup cd_sync.rst_0__i_LUT4_D_SLICE.DI1
Info: 0.2 ns logic, 3.2 ns routing
Info: Critical path report &lt;span class="k">for&lt;/span> cross-domain path &lt;span class="s1">&amp;#39;posedge $glbnet$cd_sync_clk1_0__i&amp;#39;&lt;/span> -&amp;gt; &lt;span class="s1">&amp;#39;&amp;lt;async&amp;gt;&amp;#39;&lt;/span>:
Info: curr total
Info: 0.5 0.5 Source cd_sync.U&lt;span class="nv">$$&lt;/span>1_SLICE.Q0
Info: 3.0 3.5 Net cd_sync.gsr1 budget 82.807999 ns &lt;span class="o">(&lt;/span>21,33&lt;span class="o">)&lt;/span> -&amp;gt; &lt;span class="o">(&lt;/span>4,49&lt;span class="o">)&lt;/span>
Info: Sink cd_sync.U&lt;span class="nv">$$&lt;/span>2.GSR
Info: Defined in:
Info: /home/waxapple/.local/lib/python3.8/site-packages/nmigen/vendor/lattice_ecp5.py:330
Info: 0.5 ns logic, 3.0 ns routing
Info: Max frequency &lt;span class="k">for&lt;/span> clock &lt;span class="s1">&amp;#39;$glbnet$cd_sync_clk1_0__i&amp;#39;&lt;/span>: 340.48 MHz &lt;span class="o">(&lt;/span>PASS at 25.00 MHz&lt;span class="o">)&lt;/span>
Info: Max delay &amp;lt;async&amp;gt; -&amp;gt; &amp;lt;async&amp;gt; : 1.74 ns
Info: Max delay &amp;lt;async&amp;gt; -&amp;gt; posedge &lt;span class="nv">$glbnet$cd_sync_clk1_0__i&lt;/span>: 3.45 ns
Info: Max delay posedge &lt;span class="nv">$glbnet$cd_sync_clk1_0__i&lt;/span> -&amp;gt; &amp;lt;async&amp;gt; : 3.51 ns
Info: Slack histogram:
Info: legend: * represents &lt;span class="m">1&lt;/span> endpoint&lt;span class="o">(&lt;/span>s&lt;span class="o">)&lt;/span>
Info: + represents &lt;span class="o">[&lt;/span>1,1&lt;span class="o">)&lt;/span> endpoint&lt;span class="o">(&lt;/span>s&lt;span class="o">)&lt;/span>
Info: &lt;span class="o">[&lt;/span> 36545, 38816&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span>*********************
Info: &lt;span class="o">[&lt;/span> 38816, 41087&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span>*
Info: &lt;span class="o">[&lt;/span> 41087, 43358&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span>
Info: &lt;span class="o">[&lt;/span> 43358, 45629&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span>
Info: &lt;span class="o">[&lt;/span> 45629, 47900&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span>
Info: &lt;span class="o">[&lt;/span> 47900, 50171&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span>
Info: &lt;span class="o">[&lt;/span> 50171, 52442&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span>
Info: &lt;span class="o">[&lt;/span> 52442, 54713&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span>
Info: &lt;span class="o">[&lt;/span> 54713, 56984&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span>
Info: &lt;span class="o">[&lt;/span> 56984, 59255&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span>
Info: &lt;span class="o">[&lt;/span> 59255, 61526&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span>
Info: &lt;span class="o">[&lt;/span> 61526, 63797&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span>
Info: &lt;span class="o">[&lt;/span> 63797, 66068&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span>
Info: &lt;span class="o">[&lt;/span> 66068, 68339&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span>
Info: &lt;span class="o">[&lt;/span> 68339, 70610&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span>
Info: &lt;span class="o">[&lt;/span> 70610, 72881&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span>
Info: &lt;span class="o">[&lt;/span> 72881, 75152&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span>
Info: &lt;span class="o">[&lt;/span> 75152, 77423&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span>
Info: &lt;span class="o">[&lt;/span> 77423, 79694&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span>
Info: &lt;span class="o">[&lt;/span> 79694, 81965&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span>***
Info: Program finished normally.
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="program-bitstream-file-into-fpga">Program bitstream file into FPGA&lt;/h1>
&lt;p>Wait for the FPGA arrives.&lt;/p></content></entry><entry><title type="text">[Day10] Clock domain simulation!</title><link rel="alternate" type="text/html" href="https://waxpple.github.io/posts/day10/"/><id>https://waxpple.github.io/posts/day10/</id><updated>2021-07-25T12:08:18+00:00</updated><published>2021-07-22T23:17:22+08:00</published><author><name>Waxapple</name><uri>https://waxpple.github.io/</uri><email>a0910618112@gmail.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html">Cycle accurate simulation In previous session, we use combinational circuit design. Now, it is time for some sequential circuits!
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 from typing import List from nmigen.</summary><content type="html">&lt;h1 id="cycle-accurate-simulation">Cycle accurate simulation&lt;/h1>
&lt;p>In previous session, we use combinational circuit design. Now, it is time for some sequential circuits!&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">typing&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">List&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen.asserts&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Assert&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">Cover&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">Assume&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Elaboratable&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Mux&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen.back.pysim&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Simulator&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Delay&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen.build&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Platform&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen.cli&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">main_parser&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">main_runner&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Clocky&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Elaboratable&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">load&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">elaborate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">platform&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Platform&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">If&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sync&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Mux&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Elif&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sync&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Else&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sync&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">m&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">ports&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Signal&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">parser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">main_parser&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">args&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">parser&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse_args&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">submodules&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">clocky&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">clocky&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Clocky&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="c1">#main_runner(parser, args, m, ports=[] + clocky.ports())&lt;/span>
&lt;span class="n">load&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">clocky&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">clocky&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">sim&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Simulator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">sim&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_clock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">1e-6&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">process&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="k">yield&lt;/span>
&lt;span class="k">yield&lt;/span> &lt;span class="n">load&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">yield&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">95&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">yield&lt;/span>
&lt;span class="k">yield&lt;/span> &lt;span class="n">load&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">yield&lt;/span>
&lt;span class="k">yield&lt;/span>
&lt;span class="k">yield&lt;/span>
&lt;span class="k">yield&lt;/span>
&lt;span class="k">yield&lt;/span>
&lt;span class="k">yield&lt;/span>
&lt;span class="k">yield&lt;/span>
&lt;span class="k">yield&lt;/span>
&lt;span class="k">yield&lt;/span>
&lt;span class="n">sim&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_sync_process&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">process&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">sim&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write_vcd&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;test.vcd&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;test.gtkw&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">traces&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">clocky&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ports&lt;/span>&lt;span class="p">()):&lt;/span>
&lt;span class="n">sim&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>After simulation, here is the waveform.
&lt;img src="https://i.imgur.com/6gHk82P.png" alt="Imgur">
As you can see, &lt;code>x&lt;/code> will be loaded when &lt;code>load&lt;/code> is high and after the pulse, &lt;code>x&lt;/code> will keep increasing each cycle until it reaches 100. Then &lt;code>x&lt;/code> will be clear.&lt;/p>
&lt;p>You might want to ask, why would &lt;code>x&lt;/code> is not loaded at rising edge of load? That is becuase &lt;code>load&lt;/code> is changing not simutanously with clock edge but infinitesimally close after clock rising edge. Which also applys to clock falling edge.&lt;/p>
&lt;h1 id="formal-verification">Formal verification&lt;/h1>
&lt;p>We remove simulator part and add &lt;code>main_runner&lt;/code> into our &lt;code>clocky.py&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">typing&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">List&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen.asserts&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Assert&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">Cover&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">Assume&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">Past&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Elaboratable&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Mux&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen.back.pysim&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Simulator&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Delay&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen.build&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Platform&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen.cli&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">main_parser&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">main_runner&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Clocky&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Elaboratable&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">load&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">elaborate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">platform&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Platform&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">If&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sync&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Mux&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Elif&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sync&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Else&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sync&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">m&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">ports&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Signal&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">parser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">main_parser&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">args&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">parser&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse_args&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">submodules&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">clocky&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">clocky&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Clocky&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">If&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">clocky&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sync&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">Assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">clocky&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Past&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">clocky&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)[:&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="n">main_runner&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">parser&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ports&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">clocky&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ports&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Generate toplevel iLang file and sby file.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">python3&lt;/span> &lt;span class="n">clocky&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">py&lt;/span> &lt;span class="n">generate&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">t&lt;/span> &lt;span class="n">il&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">toplevel&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">il&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="p">[&lt;/span>&lt;span class="n">tasks&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">cover&lt;/span>
&lt;span class="n">bmc&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="n">options&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">bmc&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">mode&lt;/span> &lt;span class="n">bmc&lt;/span>
&lt;span class="n">cover&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">mode&lt;/span> &lt;span class="n">cover&lt;/span>
&lt;span class="n">depth&lt;/span> &lt;span class="mi">40&lt;/span>
&lt;span class="n">multiclock&lt;/span> &lt;span class="n">off&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="n">engines&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">smtbmc&lt;/span> &lt;span class="n">boolector&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="n">script&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">read_ilang&lt;/span> &lt;span class="n">toplevel&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">il&lt;/span>
&lt;span class="n">prep&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">top&lt;/span> &lt;span class="n">top&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="n">files&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">toplevel&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">il&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">sby&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">f&lt;/span> &lt;span class="n">clocky&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sby&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>Note: use depth 40 which means to run 40 cycles.
The result will be:
&lt;img src="https://i.imgur.com/R7Vu8ZD.png" alt="Imgur">
It Failed on bmc test! Why? We can trace the bmc waveform.&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>gtkwave.exe clocky_bmc/engine_0/trace.vcd &amp;amp;
&lt;/code>&lt;/pre>&lt;p>&lt;img src="https://i.imgur.com/4GFYE2o.png" alt="Imgur">
Yes, in formal verification, it found that &lt;code>Past(x)&lt;/code> is 0x00 and &lt;code>x&lt;/code> is 0x4A which violates the rule!&lt;/p>
&lt;p>Here we change the condition into:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">parser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">main_parser&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">args&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">parser&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse_args&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">submodules&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">clocky&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">clocky&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Clocky&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">If&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">clocky&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Past&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">clocky&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sync&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">Assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">clocky&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Past&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">clocky&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)[:&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="n">main_runner&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">parser&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ports&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">clocky&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ports&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Assertion will only applied if &lt;code>x &amp;gt; 0 &amp;amp; Past(load) == 0&lt;/code>. After changing, it will pass the bmc test.
&lt;img src="https://i.imgur.com/EIKthPF.png" alt="Imgur">&lt;/p>
&lt;p>Here is another interesting case. We put a assertion like this:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">parser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">main_parser&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">args&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">parser&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse_args&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">submodules&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">clocky&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">clocky&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Clocky&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">If&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">clocky&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Past&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">clocky&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sync&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">Assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">clocky&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Past&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">clocky&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)[:&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">If&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">clocky&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sync&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">Assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Past&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">clocky&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">main_runner&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">parser&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ports&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">clocky&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ports&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This statement is not always true if x start with 0x00 at 0 ns. But who knows? Let&amp;rsquo;s fire formal verification up!&lt;/p>
&lt;pre>&lt;code>python3 clocky.py generate -t il &amp;gt; toplevel.il
sby -f clocky.sby
&lt;/code>&lt;/pre>&lt;p>&lt;img src="https://i.imgur.com/CMAL7EV.png" alt="Imgur">
Oh, it discoverd our little secret! Let&amp;rsquo;s take a look into trace waveform.&lt;/p>
&lt;pre>&lt;code>gtkwave.exe clocky_bmc/engine_0/trace.vcd &amp;amp;
&lt;/code>&lt;/pre>&lt;p>&lt;img src="https://i.imgur.com/U6VfrDO.png" alt="Imgur">
Wow! It actually discovers a specific case that we just talked about. &lt;code>x&lt;/code> begins with 0 initial value!&lt;/p>
&lt;p>Okie, how about we say only checks this condition under &lt;code>Past(rst) == 0&lt;/code>?&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">parser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">main_parser&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">args&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">parser&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse_args&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">submodules&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">clocky&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">clocky&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Clocky&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">rst&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ResetSignal&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">If&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">clocky&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Past&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">clocky&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sync&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">Assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">clocky&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Past&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">clocky&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)[:&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">If&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">clocky&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Past&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rst&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">):&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sync&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">Assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Past&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">clocky&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">main_runner&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">parser&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ports&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">clocky&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ports&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The answer is &amp;hellip;still no!&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/U6VfrDO.png" alt="Imgur">&lt;/p>
&lt;p>As you can see, you must be very careful about condtion in formal verification especially in a complex design.&lt;/p>
&lt;p>Here is the correct condition:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">parser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">main_parser&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">args&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">parser&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse_args&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">submodules&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">clocky&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">clocky&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Clocky&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">rst&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ResetSignal&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">If&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">clocky&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Past&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">clocky&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sync&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">Assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">clocky&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Past&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">clocky&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)[:&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">If&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">clocky&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Past&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rst&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Past&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">clocky&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sync&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">Assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Past&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">clocky&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">main_runner&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">parser&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ports&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">clocky&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ports&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>And here is the result:
&lt;img src="https://i.imgur.com/CrqKUZl.png" alt="Imgur">&lt;/p></content></entry><entry><title type="text">[Day09] Formal verification on adder</title><link rel="alternate" type="text/html" href="https://waxpple.github.io/posts/day09/"/><id>https://waxpple.github.io/posts/day09/</id><updated>2021-07-25T12:08:18+00:00</updated><published>2021-07-22T16:27:58+08:00</published><author><name>Waxapple</name><uri>https://waxpple.github.io/</uri><email>a0910618112@gmail.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html">Perform formal verification What is a &amp;ldquo;formal verification&amp;rdquo; ?
Formal verification is a process of checking whether a design satisfies some requirements.
Example Here is an adder. It is different from previous one on day 8. In order to make sure the adder in the design satisfies &amp;ldquo;addition&amp;rdquo;.</summary><content type="html">&lt;h1 id="perform-formal-verification">Perform formal verification&lt;/h1>
&lt;p>What is a &amp;ldquo;formal verification&amp;rdquo; ?&lt;/p>
&lt;p>&lt;code>Formal verification&lt;/code> is a process of checking whether a design satisfies some requirements.&lt;/p>
&lt;h1 id="example">Example&lt;/h1>
&lt;p>Here is an adder. It is different from previous one on day 8. In order to make sure the adder in the design satisfies &amp;ldquo;addition&amp;rdquo;. We use assertion to varify the design.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">typing&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">List&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen.asserts&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Assert&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Elaboratable&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Signal&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen.back.pysim&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Simulator&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Delay&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen.build&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Platform&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen.cli&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">main_parser&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">main_runner&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Adder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Elaboratable&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">elaborate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">paltform&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Platform&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">m&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">ports&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Signal&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">parser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">main_parser&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">args&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">parser&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse_args&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">submodules&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">adder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">adder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Adder&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">Assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">out&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">main_runner&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">parser&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ports&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ports&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="c1"># x = Signal(8)&lt;/span>
&lt;span class="c1"># y = Signal(8)&lt;/span>
&lt;span class="c1"># m.d.comb += adder.x.eq(x)&lt;/span>
&lt;span class="c1"># m.d.comb += adder.y.eq(y)&lt;/span>
&lt;span class="c1"># sim = Simulator(m)&lt;/span>
&lt;span class="c1"># def process():&lt;/span>
&lt;span class="c1"># yield x.eq(0x00)&lt;/span>
&lt;span class="c1"># yield y.eq(0x00)&lt;/span>
&lt;span class="c1"># yield Delay(1e-6)&lt;/span>
&lt;span class="c1"># yield x.eq(0xFF)&lt;/span>
&lt;span class="c1"># yield y.eq(0xFF)&lt;/span>
&lt;span class="c1"># yield Delay(1e-6)&lt;/span>
&lt;span class="c1"># yield x.eq(0x00)&lt;/span>
&lt;span class="c1"># yield Delay(1e-6)&lt;/span>
&lt;span class="c1"># sim.add_process(process)&lt;/span>
&lt;span class="c1"># with sim.write_vcd(&amp;#34;test.vcd&amp;#34;, &amp;#34;test.gtkw&amp;#34;, traces=[x, y] + adder.ports()):&lt;/span>
&lt;span class="c1"># sim.run()&lt;/span>
&lt;span class="c1"># print(&amp;#34;end of code&amp;#34;)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="generate-ilang-file">Generate iLang file&lt;/h1>
&lt;pre>&lt;code>python3 adder.py generate -t il &amp;gt; toplevel.il
&lt;/code>&lt;/pre>&lt;p>It will generate &lt;code>toplevel.il&lt;/code> under working directory path.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;span class="lnt">83
&lt;/span>&lt;span class="lnt">84
&lt;/span>&lt;span class="lnt">85
&lt;/span>&lt;span class="lnt">86
&lt;/span>&lt;span class="lnt">87
&lt;/span>&lt;span class="lnt">88
&lt;/span>&lt;span class="lnt">89
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">attribute&lt;/span> \&lt;span class="n">generator&lt;/span> &lt;span class="s2">&amp;#34;nMigen&amp;#34;&lt;/span>
&lt;span class="n">attribute&lt;/span> \&lt;span class="n">nmigen&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">hierarchy&lt;/span> &lt;span class="s2">&amp;#34;top.adder&amp;#34;&lt;/span>
&lt;span class="n">module&lt;/span> \&lt;span class="n">adder&lt;/span>
&lt;span class="n">attribute&lt;/span> \&lt;span class="n">src&lt;/span> &lt;span class="s2">&amp;#34;adder.py:12&amp;#34;&lt;/span>
&lt;span class="n">wire&lt;/span> &lt;span class="n">width&lt;/span> &lt;span class="mi">8&lt;/span> &lt;span class="n">output&lt;/span> &lt;span class="mi">0&lt;/span> \&lt;span class="n">out&lt;/span>
&lt;span class="n">attribute&lt;/span> \&lt;span class="n">src&lt;/span> &lt;span class="s2">&amp;#34;adder.py:10&amp;#34;&lt;/span>
&lt;span class="n">wire&lt;/span> &lt;span class="n">width&lt;/span> &lt;span class="mi">8&lt;/span> &lt;span class="nb">input&lt;/span> &lt;span class="mi">1&lt;/span> \&lt;span class="n">x&lt;/span>
&lt;span class="n">attribute&lt;/span> \&lt;span class="n">src&lt;/span> &lt;span class="s2">&amp;#34;adder.py:11&amp;#34;&lt;/span>
&lt;span class="n">wire&lt;/span> &lt;span class="n">width&lt;/span> &lt;span class="mi">8&lt;/span> &lt;span class="nb">input&lt;/span> &lt;span class="mi">2&lt;/span> \&lt;span class="n">y&lt;/span>
&lt;span class="n">attribute&lt;/span> \&lt;span class="n">src&lt;/span> &lt;span class="s2">&amp;#34;adder.py:17&amp;#34;&lt;/span>
&lt;span class="n">wire&lt;/span> &lt;span class="n">width&lt;/span> &lt;span class="mi">9&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="n">attribute&lt;/span> \&lt;span class="n">src&lt;/span> &lt;span class="s2">&amp;#34;adder.py:17&amp;#34;&lt;/span>
&lt;span class="n">wire&lt;/span> &lt;span class="n">width&lt;/span> &lt;span class="mi">9&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="n">attribute&lt;/span> \&lt;span class="n">src&lt;/span> &lt;span class="s2">&amp;#34;adder.py:17&amp;#34;&lt;/span>
&lt;span class="n">cell&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="n">add&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="mi">3&lt;/span>
&lt;span class="n">parameter&lt;/span> \&lt;span class="n">A_SIGNED&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="s1">&amp;#39;0&lt;/span>
&lt;span class="n">parameter&lt;/span> \&lt;span class="n">A_WIDTH&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="s1">&amp;#39;1000&lt;/span>
&lt;span class="n">parameter&lt;/span> \&lt;span class="n">B_SIGNED&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="s1">&amp;#39;0&lt;/span>
&lt;span class="n">parameter&lt;/span> \&lt;span class="n">B_WIDTH&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="s1">&amp;#39;1000&lt;/span>
&lt;span class="n">parameter&lt;/span> \&lt;span class="n">Y_WIDTH&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="s1">&amp;#39;1001&lt;/span>
&lt;span class="n">connect&lt;/span> \&lt;span class="n">A&lt;/span> \&lt;span class="n">x&lt;/span>
&lt;span class="n">connect&lt;/span> \&lt;span class="n">B&lt;/span> \&lt;span class="n">y&lt;/span>
&lt;span class="n">connect&lt;/span> \&lt;span class="n">Y&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="n">end&lt;/span>
&lt;span class="n">connect&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="n">process&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="n">group_0&lt;/span>
&lt;span class="n">assign&lt;/span> \&lt;span class="n">out&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="s1">&amp;#39;00000000&lt;/span>
&lt;span class="n">assign&lt;/span> \&lt;span class="n">out&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">sync&lt;/span> &lt;span class="n">init&lt;/span>
&lt;span class="n">end&lt;/span>
&lt;span class="n">end&lt;/span>
&lt;span class="n">attribute&lt;/span> \&lt;span class="n">generator&lt;/span> &lt;span class="s2">&amp;#34;nMigen&amp;#34;&lt;/span>
&lt;span class="n">attribute&lt;/span> \&lt;span class="n">top&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="n">attribute&lt;/span> \&lt;span class="n">nmigen&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">hierarchy&lt;/span> &lt;span class="s2">&amp;#34;top&amp;#34;&lt;/span>
&lt;span class="n">module&lt;/span> \&lt;span class="n">top&lt;/span>
&lt;span class="n">attribute&lt;/span> \&lt;span class="n">src&lt;/span> &lt;span class="s2">&amp;#34;adder.py:10&amp;#34;&lt;/span>
&lt;span class="n">wire&lt;/span> &lt;span class="n">width&lt;/span> &lt;span class="mi">8&lt;/span> &lt;span class="nb">input&lt;/span> &lt;span class="mi">0&lt;/span> \&lt;span class="n">x&lt;/span>
&lt;span class="n">attribute&lt;/span> \&lt;span class="n">src&lt;/span> &lt;span class="s2">&amp;#34;adder.py:11&amp;#34;&lt;/span>
&lt;span class="n">wire&lt;/span> &lt;span class="n">width&lt;/span> &lt;span class="mi">8&lt;/span> &lt;span class="nb">input&lt;/span> &lt;span class="mi">1&lt;/span> \&lt;span class="n">y&lt;/span>
&lt;span class="n">attribute&lt;/span> \&lt;span class="n">src&lt;/span> &lt;span class="s2">&amp;#34;adder.py:12&amp;#34;&lt;/span>
&lt;span class="n">wire&lt;/span> &lt;span class="n">width&lt;/span> &lt;span class="mi">8&lt;/span> &lt;span class="n">output&lt;/span> &lt;span class="mi">2&lt;/span> \&lt;span class="n">out&lt;/span>
&lt;span class="n">cell&lt;/span> \&lt;span class="n">adder&lt;/span> \&lt;span class="n">adder&lt;/span>
&lt;span class="n">connect&lt;/span> \&lt;span class="n">out&lt;/span> \&lt;span class="n">out&lt;/span>
&lt;span class="n">connect&lt;/span> \&lt;span class="n">x&lt;/span> \&lt;span class="n">x&lt;/span>
&lt;span class="n">connect&lt;/span> \&lt;span class="n">y&lt;/span> \&lt;span class="n">y&lt;/span>
&lt;span class="n">end&lt;/span>
&lt;span class="n">attribute&lt;/span> \&lt;span class="n">src&lt;/span> &lt;span class="s2">&amp;#34;adder.py:27&amp;#34;&lt;/span>
&lt;span class="n">wire&lt;/span> &lt;span class="n">width&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="k">assert&lt;/span>&lt;span class="err">$&lt;/span>&lt;span class="n">en&lt;/span>
&lt;span class="n">attribute&lt;/span> \&lt;span class="n">src&lt;/span> &lt;span class="s2">&amp;#34;adder.py:27&amp;#34;&lt;/span>
&lt;span class="n">wire&lt;/span> &lt;span class="n">width&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="k">assert&lt;/span>&lt;span class="err">$&lt;/span>&lt;span class="n">check&lt;/span>
&lt;span class="n">attribute&lt;/span> \&lt;span class="n">src&lt;/span> &lt;span class="s2">&amp;#34;adder.py:27&amp;#34;&lt;/span>
&lt;span class="n">wire&lt;/span> &lt;span class="n">width&lt;/span> &lt;span class="mi">9&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="n">attribute&lt;/span> \&lt;span class="n">src&lt;/span> &lt;span class="s2">&amp;#34;adder.py:27&amp;#34;&lt;/span>
&lt;span class="n">cell&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="n">add&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="n">parameter&lt;/span> \&lt;span class="n">A_SIGNED&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="s1">&amp;#39;0&lt;/span>
&lt;span class="n">parameter&lt;/span> \&lt;span class="n">A_WIDTH&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="s1">&amp;#39;1000&lt;/span>
&lt;span class="n">parameter&lt;/span> \&lt;span class="n">B_SIGNED&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="s1">&amp;#39;0&lt;/span>
&lt;span class="n">parameter&lt;/span> \&lt;span class="n">B_WIDTH&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="s1">&amp;#39;1000&lt;/span>
&lt;span class="n">parameter&lt;/span> \&lt;span class="n">Y_WIDTH&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="s1">&amp;#39;1001&lt;/span>
&lt;span class="n">connect&lt;/span> \&lt;span class="n">A&lt;/span> \&lt;span class="n">x&lt;/span>
&lt;span class="n">connect&lt;/span> \&lt;span class="n">B&lt;/span> \&lt;span class="n">y&lt;/span>
&lt;span class="n">connect&lt;/span> \&lt;span class="n">Y&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="n">end&lt;/span>
&lt;span class="n">attribute&lt;/span> \&lt;span class="n">src&lt;/span> &lt;span class="s2">&amp;#34;adder.py:27&amp;#34;&lt;/span>
&lt;span class="n">wire&lt;/span> &lt;span class="n">width&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="mi">3&lt;/span>
&lt;span class="n">attribute&lt;/span> \&lt;span class="n">src&lt;/span> &lt;span class="s2">&amp;#34;adder.py:27&amp;#34;&lt;/span>
&lt;span class="n">cell&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="n">eq&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="mi">4&lt;/span>
&lt;span class="n">parameter&lt;/span> \&lt;span class="n">A_SIGNED&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="s1">&amp;#39;0&lt;/span>
&lt;span class="n">parameter&lt;/span> \&lt;span class="n">A_WIDTH&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="s1">&amp;#39;1000&lt;/span>
&lt;span class="n">parameter&lt;/span> \&lt;span class="n">B_SIGNED&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="s1">&amp;#39;0&lt;/span>
&lt;span class="n">parameter&lt;/span> \&lt;span class="n">B_WIDTH&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="s1">&amp;#39;1001&lt;/span>
&lt;span class="n">parameter&lt;/span> \&lt;span class="n">Y_WIDTH&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="s1">&amp;#39;1&lt;/span>
&lt;span class="n">connect&lt;/span> \&lt;span class="n">A&lt;/span> \&lt;span class="n">out&lt;/span>
&lt;span class="n">connect&lt;/span> \&lt;span class="n">B&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="n">connect&lt;/span> \&lt;span class="n">Y&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="mi">3&lt;/span>
&lt;span class="n">end&lt;/span>
&lt;span class="n">attribute&lt;/span> \&lt;span class="n">src&lt;/span> &lt;span class="s2">&amp;#34;adder.py:27&amp;#34;&lt;/span>
&lt;span class="n">cell&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="k">assert&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="mi">5&lt;/span>
&lt;span class="n">connect&lt;/span> \&lt;span class="n">A&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="k">assert&lt;/span>&lt;span class="err">$&lt;/span>&lt;span class="n">check&lt;/span>
&lt;span class="n">connect&lt;/span> \&lt;span class="n">EN&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="k">assert&lt;/span>&lt;span class="err">$&lt;/span>&lt;span class="n">en&lt;/span>
&lt;span class="n">end&lt;/span>
&lt;span class="n">process&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="n">group_0&lt;/span>
&lt;span class="n">assign&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="k">assert&lt;/span>&lt;span class="err">$&lt;/span>&lt;span class="n">en&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="s1">&amp;#39;0&lt;/span>
&lt;span class="n">assign&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="k">assert&lt;/span>&lt;span class="err">$&lt;/span>&lt;span class="n">check&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="s1">&amp;#39;0&lt;/span>
&lt;span class="n">assign&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="k">assert&lt;/span>&lt;span class="err">$&lt;/span>&lt;span class="n">check&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="mi">3&lt;/span>
&lt;span class="n">assign&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="k">assert&lt;/span>&lt;span class="err">$&lt;/span>&lt;span class="n">en&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="s1">&amp;#39;1&lt;/span>
&lt;span class="n">sync&lt;/span> &lt;span class="n">init&lt;/span>
&lt;span class="n">end&lt;/span>
&lt;span class="n">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="a-sby-file-for-formal-verification">A sby file for formal verification&lt;/h1>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="p">[&lt;/span>&lt;span class="n">tasks&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">cover&lt;/span>
&lt;span class="n">bmc&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="n">options&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">bmc&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">mode&lt;/span> &lt;span class="n">bmc&lt;/span>
&lt;span class="n">cover&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">mode&lt;/span> &lt;span class="n">cover&lt;/span>
&lt;span class="n">depth&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="n">multiclock&lt;/span> &lt;span class="n">off&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="n">engines&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">smtbmc&lt;/span> &lt;span class="n">boolector&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="n">script&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">read_ilang&lt;/span> &lt;span class="n">toplevel&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">il&lt;/span>
&lt;span class="n">prep&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">top&lt;/span> &lt;span class="n">top&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="n">files&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">toplevel&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">il&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>We will talk about the settings later. Fire the thing up.&lt;/p>
&lt;pre>&lt;code>sby -f adder.sby
&lt;/code>&lt;/pre>&lt;p>&lt;img src="https://i.imgur.com/8AroqBb.png" alt="Imgur">
As you can see, cover test passed but bmc test failed. We can trace it by firing&lt;/p>
&lt;pre>&lt;code>gtkwave.exe adder_bmc/engine_0/trace.vcd
&lt;/code>&lt;/pre>&lt;p>&lt;img src="https://i.imgur.com/cLjnGam.png" alt="Imgur">
But yes, 0xFF + 0x01 == 0x00. What is the deal with it? Well, in assertion, we didn&amp;rsquo;t truncate the signal which makes it 8-bit verse 9-bit signal. Here is how we fix our design.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">typing&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">List&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen.asserts&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Assert&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Elaboratable&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Signal&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen.back.pysim&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Simulator&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Delay&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen.build&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Platform&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen.cli&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">main_parser&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">main_runner&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Adder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Elaboratable&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">elaborate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">paltform&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Platform&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">m&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">ports&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Signal&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">parser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">main_parser&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">args&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">parser&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse_args&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">submodules&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">adder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">adder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Adder&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="c1"># Truncated&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">Assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">out&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">)[:&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="n">main_runner&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">parser&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ports&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ports&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>And now the verification result will be correct:
&lt;img src="https://i.imgur.com/bmVfoW0.png" alt="Imgur">&lt;/p>
&lt;blockquote>
&lt;p>Note: If you get error message like &amp;ldquo;no boolector found&amp;rdquo;, go back to day one and install it properly.&lt;/p>
&lt;/blockquote>
&lt;h1 id="cover-function">Cover function&lt;/h1>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">typing&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">List&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen.asserts&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Assert&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">Cover&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Elaboratable&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Signal&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen.back.pysim&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Simulator&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Delay&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen.build&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Platform&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen.cli&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">main_parser&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">main_runner&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Adder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Elaboratable&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">elaborate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">paltform&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Platform&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">m&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">ports&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Signal&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">parser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">main_parser&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">args&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">parser&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse_args&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">submodules&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">adder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">adder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Adder&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">Assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">out&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">)[:&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">Cover&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">out&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mh">0xFF&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">Cover&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">out&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mh">0xFE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mh">0xFE&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">main_runner&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">parser&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ports&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ports&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Recompile it and run formal verification.
&lt;img src="https://i.imgur.com/al7GTrt.png" alt="Imgur">
There is two trace file, let&amp;rsquo;s take a look.&lt;/p>
&lt;pre>&lt;code>gtkwave.exe adder_cover/engine_0/trace0.vcd &amp;amp;
&lt;/code>&lt;/pre>&lt;p>&lt;img src="https://i.imgur.com/PaoN3hy.png" alt="Imgur">
This is the case one, &lt;code>out == 0xFF&lt;/code>&lt;/p>
&lt;pre>&lt;code>gtkwave.exe adder_cover/engine_0/trace1.vcd &amp;amp;
&lt;/code>&lt;/pre>&lt;p>&lt;img src="https://i.imgur.com/CYb1U3n.png" alt="Imgur">
This is the case two, &lt;code>out == 0xFE and x == 0xFE&lt;/code>.
Any cover event is independant to any other cover events.&lt;/p>
&lt;h1 id="assumuption">Assumuption&lt;/h1>
&lt;p>Assumption is to assume a signal that is not being a illegal state and the signal will always satisfy specific assumptions.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="o">...&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">parser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">main_parser&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">args&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">parser&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse_args&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">submodules&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">adder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">adder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Adder&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">Assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">out&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">)[:&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">Assume&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">Cover&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">out&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mh">0x00&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">out&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mh">0x40&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">main_runner&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">parser&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ports&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ports&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Here we assume &lt;code>x is always equal to y &amp;lt;&amp;lt; 1&lt;/code>. And find one case for &lt;code>output ranges between 0x00 and 0x40&lt;/code>.
&lt;img src="https://i.imgur.com/mwUwgvn.png" alt="Imgur">
We can do some interesting stuff like:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">parser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">main_parser&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">args&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">parser&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse_args&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">submodules&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">adder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">adder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Adder&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">Assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">out&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">)[:&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">If&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">Cover&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">out&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mh">0x00&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">out&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mh">0x40&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">main_runner&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">parser&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ports&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ports&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Which means cover the output range if &lt;code>x == y&amp;lt;&amp;lt;1&lt;/code>.
&lt;img src="https://i.imgur.com/II2DFfW.png" alt="Imgur">&lt;/p></content></entry><entry><title type="text">[Day08] First fight with nMigen on simply an adder!</title><link rel="alternate" type="text/html" href="https://waxpple.github.io/posts/day08/"/><id>https://waxpple.github.io/posts/day08/</id><updated>2021-07-25T12:08:18+00:00</updated><published>2021-07-22T15:04:50+08:00</published><author><name>Waxapple</name><uri>https://waxpple.github.io/</uri><email>a0910618112@gmail.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html">Prerequisites If you would like to perform simulation with GTKwave, a opensource free waveform viewer. Download the software here
and put it under C:/gtkwave. Go to the windows path setting and add it under the $path variable.
The main function We create a simple 8-bit adder</summary><content type="html">&lt;h1 id="prerequisites">Prerequisites&lt;/h1>
&lt;p>If you would like to perform simulation with GTKwave, a opensource free waveform viewer.
Download the software &lt;a href="https://sourceforge.net/projects/gtkwave/">here&lt;/a>&lt;/p>
&lt;p>and put it under &lt;code>C:/gtkwave&lt;/code>.
Go to the windows path setting and add it under the &lt;code>$path&lt;/code> variable.&lt;/p>
&lt;h1 id="the-main-function">The main function&lt;/h1>
&lt;p>We create a simple 8-bit adder&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">typing&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">List&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Elaboratable&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Signal&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen.back.pysim&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Simulator&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Delay&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen.build&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Platform&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen.cli&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">main_parser&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">main_runner&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Adder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Elaboratable&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">elaborate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">paltform&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Platform&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">m&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">ports&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Signal&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">parser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">main_parser&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">args&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">parser&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse_args&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">submodules&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">adder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">adder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Adder&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="c1"># main_runner(parser, args, m, ports=[] + adder.ports())&lt;/span>
&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">sim&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Simulator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">process&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="k">yield&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x00&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">yield&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x00&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">yield&lt;/span> &lt;span class="n">Delay&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">1e-6&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">yield&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0xFF&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">yield&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0xFF&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">yield&lt;/span> &lt;span class="n">Delay&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">1e-6&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">yield&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x00&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">yield&lt;/span> &lt;span class="n">Delay&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">1e-6&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">sim&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_process&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">process&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">sim&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write_vcd&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;test.vcd&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;test.gtkw&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">traces&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ports&lt;/span>&lt;span class="p">()):&lt;/span>
&lt;span class="n">sim&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;end of code&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="run-the-simulation">Run the simulation&lt;/h1>
&lt;pre>&lt;code>python3 adder.py
&lt;/code>&lt;/pre>&lt;p>Remember to type &lt;strong>python3&lt;/strong>!&lt;/p>
&lt;h1 id="get-the-simulation-waveform-from-gtkwave">Get the simulation waveform from GTKwave&lt;/h1>
&lt;p>After firing simulator, it will generate a file call &lt;code>test.vcd&lt;/code>.&lt;/p>
&lt;pre>&lt;code>gtkwave.exe test.vcd &amp;amp;
&lt;/code>&lt;/pre>&lt;p>The GTKwave will pop up and click adder on the left. Select the signals and right click &amp;gt; recurse import &amp;gt; append.
&lt;img src="https://i.imgur.com/CT8hlQR.png" alt="Imgur">&lt;/p></content></entry><entry><title type="text">[Day07] Synthesis</title><link rel="alternate" type="text/html" href="https://waxpple.github.io/posts/day07/"/><id>https://waxpple.github.io/posts/day07/</id><updated>2021-07-25T12:08:18+00:00</updated><published>2021-07-18T11:20:21+08:00</published><author><name>Waxapple</name><uri>https://waxpple.github.io/</uri><email>a0910618112@gmail.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html">Supported devices See the vendor directory for supported devices and toolchain details.
Devices supported as of 18 JUL 2021:
Device Platform Toolchain required Lattice iCE40 Yosys+nextpnr, LSE-iCECube2, Synplify-iCECube2 Lattice MachXO2 Diamond Lattice ECP5 Yosys+nextpnr, Diamond Xilinx Spartan 3A Xilinx ISE Xilinx Spartan 6 Xilinx ISE Xilinx 7-series (Arty, Spartan, Kintex, Virtex) Xilinx Vivado Xilinx UltraScale XilinxUltraScalePlatform Vivado Intel IntelPlatform Quartus Defining your board Many boards are defined for you at nmigen_boards.</summary><content type="html">&lt;h1 id="supported-devices">Supported devices&lt;/h1>
&lt;p>See the &lt;a href="https://github.com/m-labs/nmigen/tree/master/nmigen/vendor">vendor directory&lt;/a> for supported devices and toolchain details.&lt;/p>
&lt;p>Devices supported as of 18 JUL 2021:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Device&lt;/th>
&lt;th>Platform&lt;/th>
&lt;th>Toolchain required&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Lattice iCE40&lt;/td>
&lt;td>&lt;/td>
&lt;td>Yosys+nextpnr, LSE-iCECube2, Synplify-iCECube2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Lattice MachXO2&lt;/td>
&lt;td>&lt;/td>
&lt;td>Diamond&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Lattice ECP5&lt;/td>
&lt;td>&lt;/td>
&lt;td>Yosys+nextpnr, Diamond&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Xilinx Spartan 3A&lt;/td>
&lt;td>Xilinx&lt;/td>
&lt;td>ISE&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Xilinx Spartan 6&lt;/td>
&lt;td>Xilinx&lt;/td>
&lt;td>ISE&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Xilinx 7-series (Arty, Spartan, Kintex, Virtex)&lt;/td>
&lt;td>Xilinx&lt;/td>
&lt;td>Vivado&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Xilinx UltraScale&lt;/td>
&lt;td>XilinxUltraScalePlatform&lt;/td>
&lt;td>Vivado&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Intel&lt;/td>
&lt;td>IntelPlatform&lt;/td>
&lt;td>Quartus&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="defining-your-board">Defining your board&lt;/h1>
&lt;p>Many boards are defined for you at &lt;a href="https://github.com/m-labs/nmigen-boards/tree/master/nmigen_boards">nmigen_boards&lt;/a>.&lt;/p>
&lt;p>You can copy one from there and modify it to suit you needs, or create a new class subclassed from one of the above supported device platform classes.
For example, I am using &lt;a href="https://github.com/m-labs/nmigen-boards/blob/master/nmigen_boards/kc705.py">Xilinx-KC705&lt;/a> for my development.&lt;/p>
&lt;h2 id="class-properties">Class properties&lt;/h2>
&lt;ul>
&lt;li>&lt;code>device&lt;/code>: a string. See the base platform class for which one to choose. This affects options passed to the toolchain so that it compiles for the correct chip.&lt;/li>
&lt;li>&lt;code>package&lt;/code>: a string. See the base platform class for which one to choose. This affects options passed to the toolchain so that it compiles for the correct package of the chip.&lt;/li>
&lt;li>&lt;code>resources&lt;/code>: a list of &lt;code>Resource&lt;/code>. This names the pins you want to use, and configuration options for each such pin.&lt;/li>
&lt;li>&lt;code>default_clk&lt;/code>: the name of the resource that is the clock for the default clock domain.&lt;/li>
&lt;li>&lt;code>default_rst&lt;/code>: the name of the resource that is the reset for the default clock domain.&lt;/li>
&lt;li>&lt;code>connectors&lt;/code>: optional, a list of &lt;code>Connector&lt;/code>. It isn&amp;rsquo;t obvious what purpose this serves. It may have something to do with certain toolchains.&lt;/li>
&lt;/ul>
&lt;h2 id="resources">Resources&lt;/h2>
&lt;p>A &lt;code>Resource&lt;/code> is a structure that contains a name, a number, and one or more configuration items for the resource. Adding a &lt;code>Resource&lt;/code> to a board does two things:&lt;/p>
&lt;ul>
&lt;li>configures pin on the device&lt;/li>
&lt;li>allows you to request a resource&amp;rsquo;s &lt;code>pin&lt;/code> by name from the platform in your &lt;code>elaborate&lt;/code> function.Such a &lt;code>pin&lt;/code> has several &lt;code>signal&lt;/code> associated with it, such as &lt;code>i&lt;/code> for input and &lt;code>o&lt;/code> for output, which you can then use in your module.&lt;/li>
&lt;/ul>
&lt;p>For example, by including this &lt;code>Resource&lt;/code> into the platform&amp;rsquo;s &lt;code>resource&lt;/code> list:&lt;/p>
&lt;pre>&lt;code>Resource(&amp;quot;abc&amp;quot;, 0, Pins(&amp;quot;J3&amp;quot;, dir=&amp;quot;i&amp;quot;))
&lt;/code>&lt;/pre>&lt;p>Then pin &lt;code>J3&lt;/code> on the device will be configured as an input, and you can request the &lt;code>abc&lt;/code> resource&amp;rsquo;s input &lt;code>Signal&lt;/code> like this&lt;/p>
&lt;pre>&lt;code>platform.request(&amp;quot;abc&amp;quot;).i
&lt;/code>&lt;/pre>&lt;h2 id="resource-configuration-items">Resource configuration items&lt;/h2>
&lt;ul>
&lt;li>&lt;code>Pins&lt;/code>: specifies the space-separated pin names associated with resource, their direction type, and whether the signal should be automativally inverted when crossing the pin(for, e.g., active low signals). Direction types are:&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;code>i&lt;/code>: input only. Signal for the pin is &lt;code>.i&lt;/code>&lt;/li>
&lt;li>&lt;code>o&lt;/code>: output only. Signal for the pin is &lt;code>.o&lt;/code>&lt;/li>
&lt;li>&lt;code>io&lt;/code>: bidirectional. Signals for the pin are &lt;code>.o&lt;/code> for the output, and &lt;code>.oe&lt;/code> is the direction for the pin: 0 for input, 1 for output.&lt;/li>
&lt;li>&lt;code>oe&lt;/code>: tristate. Signals for the pin &lt;code>.o&lt;/code> for the output, and &lt;code>.oe&lt;/code> to enable output: 0 for disable, 1 for enable.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;code>PinsN&lt;/code>: shorthand for &lt;code>Pins&lt;/code>, where all pins are active low.&lt;/li>
&lt;li>&lt;code>DiffPairs&lt;/code>: specifies the space-separated pin names for one or more differential pairs (positive and negative pins)&lt;/li>
&lt;li>&lt;code>Clock&lt;/code>: specifies that the resource is a clock with the given frequency in Hz.&lt;/li>
&lt;li>&lt;code>Attrs&lt;/code>: platform-specific attributes such as voltage standard to select.&lt;/li>
&lt;/ul>
&lt;p>A full resource specification for a clock pin used on a Lattice ICE40 board could be as follows:&lt;/p>
&lt;pre>&lt;code>Resource(&amp;quot;clk&amp;quot;, 0, Pins(&amp;quot;J3&amp;quot;,dir=&amp;quot;i&amp;quot;), Clock(12e6),Attrs(GLOBAL=True, IO_STANDARD=&amp;quot;SB_LVCMOS&amp;quot;))
&lt;/code>&lt;/pre>&lt;p>This example says that the &lt;code>clk&lt;/code> resource is at pin &lt;code>J3&lt;/code> on the FPGA. &lt;code>J3&lt;/code> is defined by vender of your FPGA. For example, KC705 pin map can be found at &lt;a href="https://www.xilinx.com/support/documentation/boards_and_kits/kc705/ug810_KC705_Eval_Bd.pdf">here&lt;/a>. &lt;code>clk&lt;/code> has a frequency of 12MHz, is a &amp;ldquo;global&amp;rdquo; signal, and uses the LVCMOS voltage standard. Without knowing about the toolchain for the platform, you will not know what attributes are required.&lt;/p>
&lt;h2 id="example-for-the-xilinx-kc705">Example for the Xilinx-KC705.&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">os&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">subprocess&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen.build&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="o">*&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen.vendor.xilinx_7series&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="o">*&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">.resources&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="o">*&lt;/span>
&lt;span class="n">__all__&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;KC705Platform&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">KC705Platform&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Xilinx7SeriesPlatform&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">device&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;xc7k325t&amp;#34;&lt;/span>
&lt;span class="n">package&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;ffg900&amp;#34;&lt;/span>
&lt;span class="n">speed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;2&amp;#34;&lt;/span>
&lt;span class="n">default_clk&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;clk156&amp;#34;&lt;/span>
&lt;span class="n">resources&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="n">Resource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;clk156&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">DiffPairs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;K28&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;K29&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;i&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">Clock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">156e6&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">Attrs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IOSTANDARD&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;LVDS_25&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">LEDResources&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pins&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;AB8 AA8 AC9 AB9 AE26 G19 E18 F16&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">attrs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">Attrs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IOSTANDARD&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;LVCMOS15&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">UARTResource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">rx&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;M19&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">tx&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;K24&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">attrs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">Attrs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IOSTANDARD&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;LVCMOS33&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="n">connectors&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">toolchain_program&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">products&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">openocd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">environ&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;OPENOCD&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;openocd&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">products&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">extract&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;{}.bit&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">bitstream_filename&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">subprocess&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">check_call&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">openocd&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;-c&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;source [find board/kc705.cfg]; init; pld load 0 {}; exit&amp;#34;&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bitstream_filename&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">])&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">.test.blinky&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="o">*&lt;/span>
&lt;span class="n">KC705Platform&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">build&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Blinky&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">do_program&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>You can see that it is not well define yet. Let&amp;rsquo;s take a look into arty-a7 board.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;span class="lnt">105
&lt;/span>&lt;span class="lnt">106
&lt;/span>&lt;span class="lnt">107
&lt;/span>&lt;span class="lnt">108
&lt;/span>&lt;span class="lnt">109
&lt;/span>&lt;span class="lnt">110
&lt;/span>&lt;span class="lnt">111
&lt;/span>&lt;span class="lnt">112
&lt;/span>&lt;span class="lnt">113
&lt;/span>&lt;span class="lnt">114
&lt;/span>&lt;span class="lnt">115
&lt;/span>&lt;span class="lnt">116
&lt;/span>&lt;span class="lnt">117
&lt;/span>&lt;span class="lnt">118
&lt;/span>&lt;span class="lnt">119
&lt;/span>&lt;span class="lnt">120
&lt;/span>&lt;span class="lnt">121
&lt;/span>&lt;span class="lnt">122
&lt;/span>&lt;span class="lnt">123
&lt;/span>&lt;span class="lnt">124
&lt;/span>&lt;span class="lnt">125
&lt;/span>&lt;span class="lnt">126
&lt;/span>&lt;span class="lnt">127
&lt;/span>&lt;span class="lnt">128
&lt;/span>&lt;span class="lnt">129
&lt;/span>&lt;span class="lnt">130
&lt;/span>&lt;span class="lnt">131
&lt;/span>&lt;span class="lnt">132
&lt;/span>&lt;span class="lnt">133
&lt;/span>&lt;span class="lnt">134
&lt;/span>&lt;span class="lnt">135
&lt;/span>&lt;span class="lnt">136
&lt;/span>&lt;span class="lnt">137
&lt;/span>&lt;span class="lnt">138
&lt;/span>&lt;span class="lnt">139
&lt;/span>&lt;span class="lnt">140
&lt;/span>&lt;span class="lnt">141
&lt;/span>&lt;span class="lnt">142
&lt;/span>&lt;span class="lnt">143
&lt;/span>&lt;span class="lnt">144
&lt;/span>&lt;span class="lnt">145
&lt;/span>&lt;span class="lnt">146
&lt;/span>&lt;span class="lnt">147
&lt;/span>&lt;span class="lnt">148
&lt;/span>&lt;span class="lnt">149
&lt;/span>&lt;span class="lnt">150
&lt;/span>&lt;span class="lnt">151
&lt;/span>&lt;span class="lnt">152
&lt;/span>&lt;span class="lnt">153
&lt;/span>&lt;span class="lnt">154
&lt;/span>&lt;span class="lnt">155
&lt;/span>&lt;span class="lnt">156
&lt;/span>&lt;span class="lnt">157
&lt;/span>&lt;span class="lnt">158
&lt;/span>&lt;span class="lnt">159
&lt;/span>&lt;span class="lnt">160
&lt;/span>&lt;span class="lnt">161
&lt;/span>&lt;span class="lnt">162
&lt;/span>&lt;span class="lnt">163
&lt;/span>&lt;span class="lnt">164
&lt;/span>&lt;span class="lnt">165
&lt;/span>&lt;span class="lnt">166
&lt;/span>&lt;span class="lnt">167
&lt;/span>&lt;span class="lnt">168
&lt;/span>&lt;span class="lnt">169
&lt;/span>&lt;span class="lnt">170
&lt;/span>&lt;span class="lnt">171
&lt;/span>&lt;span class="lnt">172
&lt;/span>&lt;span class="lnt">173
&lt;/span>&lt;span class="lnt">174
&lt;/span>&lt;span class="lnt">175
&lt;/span>&lt;span class="lnt">176
&lt;/span>&lt;span class="lnt">177
&lt;/span>&lt;span class="lnt">178
&lt;/span>&lt;span class="lnt">179
&lt;/span>&lt;span class="lnt">180
&lt;/span>&lt;span class="lnt">181
&lt;/span>&lt;span class="lnt">182
&lt;/span>&lt;span class="lnt">183
&lt;/span>&lt;span class="lnt">184
&lt;/span>&lt;span class="lnt">185
&lt;/span>&lt;span class="lnt">186
&lt;/span>&lt;span class="lnt">187
&lt;/span>&lt;span class="lnt">188
&lt;/span>&lt;span class="lnt">189
&lt;/span>&lt;span class="lnt">190
&lt;/span>&lt;span class="lnt">191
&lt;/span>&lt;span class="lnt">192
&lt;/span>&lt;span class="lnt">193
&lt;/span>&lt;span class="lnt">194
&lt;/span>&lt;span class="lnt">195
&lt;/span>&lt;span class="lnt">196
&lt;/span>&lt;span class="lnt">197
&lt;/span>&lt;span class="lnt">198
&lt;/span>&lt;span class="lnt">199
&lt;/span>&lt;span class="lnt">200
&lt;/span>&lt;span class="lnt">201
&lt;/span>&lt;span class="lnt">202
&lt;/span>&lt;span class="lnt">203
&lt;/span>&lt;span class="lnt">204
&lt;/span>&lt;span class="lnt">205
&lt;/span>&lt;span class="lnt">206
&lt;/span>&lt;span class="lnt">207
&lt;/span>&lt;span class="lnt">208
&lt;/span>&lt;span class="lnt">209
&lt;/span>&lt;span class="lnt">210
&lt;/span>&lt;span class="lnt">211
&lt;/span>&lt;span class="lnt">212
&lt;/span>&lt;span class="lnt">213
&lt;/span>&lt;span class="lnt">214
&lt;/span>&lt;span class="lnt">215
&lt;/span>&lt;span class="lnt">216
&lt;/span>&lt;span class="lnt">217
&lt;/span>&lt;span class="lnt">218
&lt;/span>&lt;span class="lnt">219
&lt;/span>&lt;span class="lnt">220
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">os&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">subprocess&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen.build&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="o">*&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen.vendor.xilinx_7series&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="o">*&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">.resources&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="o">*&lt;/span>
&lt;span class="n">__all__&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;ArtyA7Platform&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">ArtyA7Platform&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Xilinx7SeriesPlatform&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">device&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;xc7a35ti&amp;#34;&lt;/span>
&lt;span class="n">package&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;csg324&amp;#34;&lt;/span>
&lt;span class="n">speed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;1L&amp;#34;&lt;/span>
&lt;span class="n">default_clk&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;clk100&amp;#34;&lt;/span>
&lt;span class="n">resources&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="n">Resource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;clk100&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Pins&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;E3&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;i&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">Clock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">100e6&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">Attrs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IOSTANDARD&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;LVCMOS33&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">LEDResources&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pins&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;H5 J5 T9 T10&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attrs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">Attrs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IOSTANDARD&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;LVCMOS33&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">RGBLEDResource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;G6&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">g&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;F6&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;E1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attrs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">Attrs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IOSTANDARD&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;LVCMOS33&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">RGBLEDResource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;G3&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">g&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;J4&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;G4&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attrs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">Attrs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IOSTANDARD&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;LVCMOS33&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">RGBLEDResource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;J3&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">g&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;J2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;H4&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attrs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">Attrs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IOSTANDARD&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;LVCMOS33&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">RGBLEDResource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;K1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">g&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;H6&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;K2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attrs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">Attrs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IOSTANDARD&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;LVCMOS33&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">ButtonResources&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pins&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;D9 C9 B9 B8 &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attrs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">Attrs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IOSTANDARD&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;LVCMOS33&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">SwitchResources&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pins&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;A8 C11 C10 A10&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attrs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">Attrs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IOSTANDARD&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;LVCMOS33&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">UARTResource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">rx&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;A9&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">tx&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;D10&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">attrs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">Attrs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IOSTANDARD&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;LVCMOS33&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="n">Resource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;cpu_reset&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Pins&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;C2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;o&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">Attrs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IOSTANDARD&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;LVCMOS33&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">SPIResource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">cs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;C1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">clk&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;F1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mosi&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;H1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">miso&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;G1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">attrs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">Attrs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IOSTANDARD&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;LVCMOS33&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="n">Resource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;i2c&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">Subsignal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;scl&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Pins&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;L18&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;io&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Subsignal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;sda&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Pins&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;M18&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;io&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Subsignal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;scl_pullup&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Pins&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;A14&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;o&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Subsignal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;sda_pullup&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Pins&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;A13&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;o&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Attrs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IOSTANDARD&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;LVCMOS33&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">SPIFlashResources&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">cs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;L13&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">clk&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;L16&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mosi&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;K17&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">miso&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;K18&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">wp&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;L14&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">hold&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;M14&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">attrs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">Attrs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IOSTANDARD&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;LVCMOS33&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="n">Resource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;ddr3&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">Subsignal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;rst&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PinsN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;K6&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;o&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Subsignal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;clk&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">DiffPairs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;U9&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;V9&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;o&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">Attrs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IOSTANDARD&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;DIFF_SSTL135&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Subsignal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;clk_en&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Pins&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;N5&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;o&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Subsignal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;cs&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PinsN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;U8&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;o&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Subsignal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;we&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PinsN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;P5&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;o&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Subsignal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;ras&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PinsN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;P3&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;o&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Subsignal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;cas&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PinsN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;M4&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;o&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Subsignal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Pins&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;R2 M6 N4 T1 N6 R7 V6 U7 R8 V7 R6 U6 T6 T8&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;o&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Subsignal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;ba&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Pins&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;R1 P4 P2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;o&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Subsignal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;dqs&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">DiffPairs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;N2 U2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;N1 V2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;io&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">Attrs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IOSTANDARD&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;DIFF_SSTL135&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Subsignal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;dq&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Pins&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;K5 L3 K3 L6 M3 M1 L4 M2 V4 T5 U4 V5 V1 T3 U3 R3&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;io&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">Attrs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IN_TERM&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;UNTUNED_SPLIT_40&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Subsignal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;dm&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Pins&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;L1 U1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;o&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Subsignal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;odt&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Pins&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;R5&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;o&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Attrs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IOSTANDARD&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;SSTL135&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">SLEW&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;FAST&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="n">Resource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;eth_clk25&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Pins&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;G18&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;o&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">Clock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">25e6&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">Attrs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IOSTANDARD&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;LVCMOS33&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Resource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;eth_clk50&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Pins&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;G18&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;o&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">Clock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">50e6&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">Attrs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IOSTANDARD&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;LVCMOS33&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Resource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;eth_mii&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">Subsignal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;rst&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PinsN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;C16&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;o&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Subsignal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;mdio&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Pins&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;K13&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;io&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Subsignal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;mdc&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Pins&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;F16&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;o&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Subsignal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;tx_clk&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Pins&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;H16&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;i&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Subsignal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;tx_en&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Pins&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;H15&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;o&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Subsignal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;tx_data&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Pins&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;H14 J14 J13 H17&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;o&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Subsignal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;rx_clk&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Pins&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;F15&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;i&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Subsignal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;rx_dv&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Pins&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;G16&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;i&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">Attrs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PULLDOWN&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;TRUE&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span> &lt;span class="c1"># strap to select MII&lt;/span>
&lt;span class="n">Subsignal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;rx_er&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Pins&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;C17&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;i&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Subsignal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;rx_data&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Pins&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;D18 E17 E18 G17&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;i&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Subsignal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;col&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Pins&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;D17&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;i&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Subsignal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;crs&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Pins&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;G14&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;i&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Attrs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IOSTANDARD&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;LVCMOS33&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="n">Resource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;eth_rmii&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">Subsignal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;rst&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PinsN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;C16&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;o&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Subsignal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;mdio&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Pins&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;K13&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;io&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Subsignal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;mdc&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Pins&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;F16&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;o&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Subsignal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;tx_en&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Pins&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;H15&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;o&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Subsignal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;tx_data&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Pins&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;H14 J14&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;o&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Subsignal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;rx_crs_dv&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Pins&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;G14&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;i&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Subsignal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;rx_dv&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Pins&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;G16&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;i&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">Attrs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PULLUP&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;TRUE&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span> &lt;span class="c1"># strap to select RMII&lt;/span>
&lt;span class="n">Subsignal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;rx_er&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Pins&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;C17&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;i&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Subsignal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;rx_data&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Pins&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;D18 E17&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;i&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="n">Attrs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IOSTANDARD&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;LVCMOS33&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="n">connectors&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="n">Connector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;pmod&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;G13 B11 A11 D12 - - D13 B18 A18 K16 - -&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="c1"># JA&lt;/span>
&lt;span class="n">Connector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;pmod&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;E15 E16 D15 C15 - - J17 J18 K15 J15 - -&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="c1"># JB&lt;/span>
&lt;span class="n">Connector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;pmod&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;U12 V12 V10 V11 - - U14 V14 T13 U13 - -&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="c1"># JC&lt;/span>
&lt;span class="n">Connector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;pmod&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34; D4 D3 F4 F3 - - E2 D2 H2 G2 - -&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="c1"># JD&lt;/span>
&lt;span class="n">Connector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;ck_io&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1"># Outer Digital Header&lt;/span>
&lt;span class="s2">&amp;#34;io0&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;V15&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;io1&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;U16&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;io2&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;P14&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;io3&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;T11&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;io4&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;R12&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;io5&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;T14&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;io6&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;T15&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;io7&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;T16&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;io8&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;N15&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;io9&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;M16&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;io10&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;V17&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;io11&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;U18&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;io12&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;R17&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;io13&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;P17&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1"># Inner Digital Header&lt;/span>
&lt;span class="s2">&amp;#34;io26&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;U11&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;io27&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;V16&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;io28&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;M13&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;io29&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;R10&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;io30&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;R11&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;io31&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;R13&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;io32&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;R15&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;io33&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;P15&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;io34&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;R16&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;io35&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;N16&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;io36&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;N14&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;io37&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;U17&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;io38&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;T18&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;io39&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;R18&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;io40&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;P18&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;io41&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;N17&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1"># Outer Analog Header as Digital IO&lt;/span>
&lt;span class="s2">&amp;#34;a0&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;F5&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;a1&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;D8&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;a2&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;C7&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;a3&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;E7&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;a4&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;D7&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;a5&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;D5&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1"># Inner Analog Header as Digital IO&lt;/span>
&lt;span class="s2">&amp;#34;io20&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;B7&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;io21&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;B6&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;io22&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;E6&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;io23&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;E5&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;io24&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;A4&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;io25&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;A3&amp;#34;&lt;/span>
&lt;span class="p">}),&lt;/span>
&lt;span class="n">Connector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;xadc&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1"># Outer Analog Header&lt;/span>
&lt;span class="s2">&amp;#34;vaux4_n&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;C5&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;vaux4_p&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;C6&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;vaux5_n&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;A5&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;vaux5_p&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;A6&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;vaux6_n&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;B4&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;vaux6_p&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;C4&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;vaux7_n&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;A1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;vaux7_p&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;B1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;vaux15_n&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;B2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;vaux15_p&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;B3&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;vaux0_n&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;C14&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;vaux0_p&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;D14&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1"># Inner Analog Header&lt;/span>
&lt;span class="s2">&amp;#34;vaux12_n&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;B7&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;vaux12_p&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;B6&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;vaux13_n&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;E6&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;vaux13_p&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;E5&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;vaux14_n&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;A4&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;vaux14_p&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;A3&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1"># Power Measurements&lt;/span>
&lt;span class="s2">&amp;#34;vsnsuv_n&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;B17&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;vsnsuv_p&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;B16&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;vsns5v0_n&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;B12&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;vsns5v0_p&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;C12&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;isns5v0_n&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;F14&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;isns5v0_n&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;F13&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;isns0v95_n&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;A16&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;isns0v95_n&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;A15&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">toolchain_prepare&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fragment&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">kwargs&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">overrides&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="s2">&amp;#34;script_before_bitstream&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="s2">&amp;#34;set_property BITSTREAM.CONFIG.SPI_BUSWIDTH 4 [current_design]&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;script_after_bitstream&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="s2">&amp;#34;write_cfgmem -force -format bin -interface spix4 -size 16 &amp;#34;&lt;/span>
&lt;span class="s2">&amp;#34;-loadbit &lt;/span>&lt;span class="se">\&amp;#34;&lt;/span>&lt;span class="s2">up 0x0 {name}.bit&lt;/span>&lt;span class="se">\&amp;#34;&lt;/span>&lt;span class="s2"> -file {name}.bin&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="s2">&amp;#34;add_constraints&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="s2">&amp;#34;set_property INTERNAL_VREF 0.675 [get_iobanks 34]&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">super&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">toolchain_prepare&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fragment&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">overrides&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">kwargs&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">toolchain_program&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">products&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">xc3sprog&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">environ&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;XC3SPROG&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;xc3sprog&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">products&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">extract&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;{}.bit&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">bitstream_filename&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">subprocess&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">xc3sprog&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;-c&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;nexys4&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bitstream_filename&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">check&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">.test.blinky&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="o">*&lt;/span>
&lt;span class="n">ArtyA7Platform&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">build&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Blinky&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">do_program&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;mode&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;full&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;isActive&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">false&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="building">Building&lt;/h1>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">python3&lt;/span> &lt;span class="nb">file&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">py&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This will result in a directory, &lt;code>build&lt;/code>, containing the output files:&lt;/p>
&lt;ul>
&lt;li>&lt;code>top.il&lt;/code>: The ilang output for yosys.&lt;/li>
&lt;li>&lt;code>top.bin&lt;/code>: The bitstream to send to the device (e.g. via iceprog)&lt;/li>
&lt;li>&lt;code>top.rpt&lt;/code>: Statistics from nextpnr. The most useful is the cell and LUT&lt;/li>
&lt;li>&lt;code>top.tim&lt;/code>: Timing analysis. Shows how fast you can go. Probably.&lt;/li>
&lt;/ul></content></entry><entry><title type="text">[Day06] Formal_verification</title><link rel="alternate" type="text/html" href="https://waxpple.github.io/posts/day06/"/><id>https://waxpple.github.io/posts/day06/</id><updated>2021-07-25T12:08:18+00:00</updated><published>2021-07-18T09:50:15+08:00</published><author><name>Waxapple</name><uri>https://waxpple.github.io/</uri><email>a0910618112@gmail.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html">Assert, Assume, and Cover for fun and profit. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from nmigen.asserts import Assert, Assume, Cover from nmigen.cli import main_parser, main_runner from somewhere import Adder if __name__ == &amp;#34;__main__&amp;#34;: parser = main_parser() args = parser.</summary><content type="html">&lt;h1 id="assert-assume-and-cover-for-fun-and-profit">Assert, Assume, and Cover for fun and profit.&lt;/h1>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen.asserts&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Assert&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Assume&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Cover&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen.cli&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">main_parser&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">main_runner&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">somewhere&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Adder&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">parser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">main_parser&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">args&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">parser&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse_args&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">submodules&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">adder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">adder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Adder&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">Assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">out&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">)[:&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">If&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">Cover&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">out&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mh">0x00&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">out&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mh">0x40&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">main_runner&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">parser&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ports&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">adder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ports&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="past-rose-fell-stable">Past, Rose, Fell, Stable&lt;/h1>
&lt;pre>&lt;code>from nmigen.asserts import Assert, Assume, Cover
from nmigen.asserts import Past, Rose, Fell, Stable
&lt;/code>&lt;/pre>&lt;h1 id="not-ready-yet">Not ready yet.&lt;/h1></content></entry><entry><title type="text">[Day05] Simulations</title><link rel="alternate" type="text/html" href="https://waxpple.github.io/posts/day05/"/><id>https://waxpple.github.io/posts/day05/</id><updated>2021-07-25T12:08:18+00:00</updated><published>2021-07-14T15:28:58+08:00</published><author><name>Waxapple</name><uri>https://waxpple.github.io/</uri><email>a0910618112@gmail.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html">Simulating The best way to simulate a module is through nMigen&amp;rsquo;s Simulator.
Define you ports Define a ports function in your module which returns an array of your module&amp;rsquo;s ports:
1 2 3 4 class YourModule(Elaboratable): ... def ports(self): return [self.youmodule.p1, self.</summary><content type="html">&lt;h1 id="simulating">Simulating&lt;/h1>
&lt;p>The best way to simulate a module is through nMigen&amp;rsquo;s &lt;code>Simulator&lt;/code>.&lt;/p>
&lt;h2 id="define-you-ports">Define you ports&lt;/h2>
&lt;p>Define a &lt;code>ports&lt;/code> function in your module which returns an array of your module&amp;rsquo;s ports:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">YourModule&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Elaboratable&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">ports&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">youmodule&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">p1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">yourmodule&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">p2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="create-a-top-level-module">Create a top-level module&lt;/h2>
&lt;p>Create a top-level module for your simulation:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="o">*&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen.back.pysim&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Simulator&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Delay&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Settle&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">somewhere&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">YourModule&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">submodules&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">yourmodule&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">yourmodule&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">YourModule&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">sim&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Simulator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">process&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="c1"># To be defined&lt;/span>
&lt;span class="n">sim&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_process&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">process&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># or sim.add_sync_process(process), see below&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">sim&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write_vcd&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;test.vcd&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;test.gtkw&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">traces&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">yourmodule&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ports&lt;/span>&lt;span class="p">()):&lt;/span>
&lt;span class="n">sim&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>There is currently a bug in nMigen where inputs to your module are not output to the trace file. To get around this, for each such input, place this in your &lt;code>main&lt;/code> before the &lt;code>Simulator&lt;/code> construction:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">input1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">yourmodule&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">input1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="n">sim&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Simulator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Inside your &lt;code>process&lt;/code>, refer to this input as &lt;code>input1&lt;/code>, not &lt;code>yourmodule.input1&lt;/code>. This will force nMigen to include &lt;code>input1&lt;/code> in the trace file.&lt;/p>
&lt;/blockquote>
&lt;h2 id="define-your-clocks-if-any">Define your clocks, if any&lt;/h2>
&lt;p>If you have clocks, add each clock after the &lt;code>Simulator&lt;/code> constrction, giving the clock period in seconds. For example, a 100MHz clock for clock domain &lt;code>fast_clock&lt;/code> and a nearly 166MHz clock for &lt;code>faster clock&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="o">...&lt;/span>
&lt;span class="n">sim&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Simulator&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">sim&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_clock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">1e-8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">domain&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;fast_clock&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">sim&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_clock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">6e-9&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">domain&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;faster_clock&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Leaving out &lt;code>domain&lt;/code> will cause the clock period to be assigned to the default clock domain, &lt;code>sync&lt;/code>.&lt;/p>
&lt;h2 id="the-process-function">The process function&lt;/h2>
&lt;p>The &lt;code>process&lt;/code> function is a Python generator that nMigen calls to see what to do next in the simulation. Since it is a generator, process must &lt;code>yield&lt;/code> a statement to perform. For example:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">process&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="k">yield&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">yield&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0xFF&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The above would set &lt;code>x&lt;/code> to 0 and &lt;code>y&lt;/code> to 0xFF, with effectively no delay between them.
You can yield nMigen &lt;code>Value&lt;/code>, which you can then use to do various comparisons.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">process&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="k">yield&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">yield&lt;/span> &lt;span class="n">Delay&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">1e-8&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># delay 10 nano seconds&lt;/span>
&lt;span class="n">yie&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0xFF&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">yield&lt;/span> &lt;span class="n">Settle&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1"># force all combinational computation to happen.&lt;/span>
&lt;span class="n">got&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">yield&lt;/span> &lt;span class="n">yourmodule&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sum&lt;/span>
&lt;span class="n">want&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">yield&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">)[:&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">got&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">want&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="s2">&amp;#34;Error, result={got:02x},golden={want:02x})&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In the above example, &lt;code>x&lt;/code> will be set to 0, then there will be 10 ns delay, then &lt;code>y&lt;/code> will be set to 0xFF, all combinational logic will be given a chance to settle, and finally &lt;code>yourmodule.sum&lt;/code> and &lt;code>(x+y)[:8]&lt;/code> will be evaluated, and if they are not equal, a diagnostic message is sent to the terminal output.&lt;/p>
&lt;p>You can even have more that one process running parallel.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">x_process&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="k">yield&lt;/span> &lt;span class="n">Delay&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">1e-6&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">yield&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">yield&lt;/span> &lt;span class="n">Settle&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">y_process&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="k">yield&lt;/span> &lt;span class="n">Delay&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">1.2e-6&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">yield&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0xFF&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">yield&lt;/span> &lt;span class="n">Settle&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">sim&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_process&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x_process&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">sim&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_process&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y_process&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In the above example, &lt;code>x&lt;/code> will be set to 0 at time 1 us, and &lt;code>y&lt;/code> will be set to 0xFF at time 1.2 us.&lt;/p>
&lt;p>&lt;strong>Warning&lt;/strong>: driving the same signal from more than one process can lead to undefined behavior if both processes assign to the signal simultaneously.&lt;/p>
&lt;h2 id="non-synchronous-processes">Non-synchronous processes&lt;/h2>
&lt;p>If you want to specify exactly when signals change based on time, then you can create a non-synchronous &lt;code>process&lt;/code>. You must add such a process to the simulator via &lt;code>add_process&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">sim&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_process&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">process&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="synchronous-process">Synchronous process&lt;/h2>
&lt;p>If you want to specify when signals change base on clock edges, then you can create a synchronous &lt;code>process&lt;/code>. You can add such a process to the simulator via &lt;code>add_sync_process&lt;/code>, specifying the clock domain it should be clocked from:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">sim&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_sync_process&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">process1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">domain&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;name1&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">sim&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_sync_process&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">process2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">domain&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;name2&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>If you &lt;code>yield&lt;/code> with no value from a synchronous process, then the process will wait for the next clock edge. Note that for synchronous processes, one clock edge will occur before the process starts, so take that into account when you look at your traces.
It is also important to understand when statements are executed in relation to clock edges. They are always executed infinitesimally after the previous clock edge. Thus, in this example.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">process&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="k">yield&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">#step1&lt;/span>
&lt;span class="k">yield&lt;/span> &lt;span class="c1">#step2&lt;/span>
&lt;span class="k">yield&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">#step3&lt;/span>
&lt;span class="k">yield&lt;/span> &lt;span class="c1">#step4&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>There will be one clock edge that always takes place before the process runs. Then &lt;code>x&lt;/code> is set to 0 (step 1). Then another clock edge happens(step 2). &lt;code>x&lt;/code> is set to 1 infinitesimally after that clock edge (step 3). Then another clock signals that appear to change coincident with a clock edge actuvally change just after that clock edge. Outputs that change like that can be consider to have been &amp;ldquo;driven&amp;rdquo; by the clock edge.&lt;/p>
&lt;h2 id="passive-and-active-processes">Passive and active processes&lt;/h2>
&lt;p>Processed may be passive or active. When an active process runs out of things to tell the simulator to do, it asks the simulator to finish. In effect, it controls the endpoint of the simulator. The simulation ends when all active processes are done. A &lt;em>passive&lt;/em> process, on the other hand, doesn&amp;rsquo;t ask the simulator to finish.&lt;/p>
&lt;p>By default, processes added with &lt;code>add_process&lt;/code> and &lt;code>add_sync_process&lt;/code> are active. A process can change its mode using &lt;code>yield Active()&lt;/code> or &lt;code>yield Passive()&lt;/code>.&lt;/p>
&lt;h2 id="ending-the-simulation">Ending the simulation&lt;/h2>
&lt;p>As mentioned above, the simulation ends when all active processes are done. This is how &lt;code>sim.run()&lt;/code> works.&lt;/p>
&lt;p>However, you can instead use &lt;code>sim.run_until()&lt;/code>, which lets you end the simulation at a particular time. The &lt;code>run_passive&lt;/code> key is &lt;code>False&lt;/code> by default, meaning that the simulation will also end if all active processes are done. This behavior can be changed by setting &lt;code>run_passive&lt;/code> to &lt;code>True&lt;/code>, in which case the simulation will only end once the specified time is reached. For example, the following will run the simulation for 100 microseconds and then stop, regardless of whether the active processes are done.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">with&lt;/span> &lt;span class="n">sim&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write_vcd&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;test.vcd&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;test.gtkw&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">traces&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">yourmodule&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ports&lt;/span>&lt;span class="p">()):&lt;/span>
&lt;span class="n">sim&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run_until&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">100e-6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">run_passive&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="running-the-simulation-and-viewing-the-output">Running the simulation and viewing the output&lt;/h2>
&lt;p>The simulation is run simply by running the main module:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">python3&lt;/span> &lt;span class="n">main_module&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">py&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The output should be a &lt;code>test.vcd&lt;/code> file and a &lt;code>test.gtkw&lt;/code> file. Running &lt;code>gtkwave&lt;/code> will allow you to view the output. Running it on &lt;code>test.vcd&lt;/code> will make you select the signals you want to see when &lt;code>gtkwave&lt;/code> opens, while running it on &lt;code>test.gtkw&lt;/code> will open &lt;code>gtkwave&lt;/code> showing the signals in the &lt;code>traces&lt;/code> key that you you gave in the call to &lt;code>sim.write_vcd()&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">gtkwave&lt;/span> &lt;span class="n">test&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">vcd&lt;/span>
&lt;span class="n">gtkwave&lt;/span> &lt;span class="n">test&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">gtkw&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></content></entry><entry><title type="text">[Day04] Bit selection</title><link rel="alternate" type="text/html" href="https://waxpple.github.io/posts/day04/"/><id>https://waxpple.github.io/posts/day04/</id><updated>2021-07-25T12:08:18+00:00</updated><published>2021-07-13T09:48:38+08:00</published><author><name>Waxapple</name><uri>https://waxpple.github.io/</uri><email>a0910618112@gmail.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html">Spliting and combining signals Slicing signals We can get the least significant bit by x[0] or the most significant bit by x[15].
1 2 3 4 5 6 7 8 9 10 &amp;gt;&amp;gt;&amp;gt; from nmigen import * &amp;gt;&amp;gt;&amp;gt; x = Signal(16) &amp;gt;&amp;gt;&amp;gt; x (sig x) &amp;gt;&amp;gt;&amp;gt; x.</summary><content type="html">&lt;h1 id="spliting-and-combining-signals">Spliting and combining signals&lt;/h1>
&lt;h2 id="slicing-signals">Slicing signals&lt;/h2>
&lt;p>We can get the least significant bit by &lt;code>x[0]&lt;/code> or the most significant bit by &lt;code>x[15]&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="o">*&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="n">sig&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">Shape&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">width&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">signed&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">False&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">15&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nb">slice&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">sig&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="mi">15&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">15&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">Shape&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">width&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">signed&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">False&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>While &lt;code>x[7:0]&lt;/code> is the way to extract the eight least significant bits in verilog.But in nMigen we use &lt;code>x[0:8]&lt;/code> or &lt;code>x[:8]&lt;/code>. It will be &lt;code>Signal_name[start_bit:bits]&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">Traceback&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">most&lt;/span> &lt;span class="n">recent&lt;/span> &lt;span class="n">call&lt;/span> &lt;span class="n">last&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">File&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">module&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="n">File&lt;/span> &lt;span class="s2">&amp;#34;/home/waxapple/.local/lib/python3.8/site-packages/nmigen/hdl/ast.py&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="mi">238&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="fm">__getitem__&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Slice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">start&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">stop&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">File&lt;/span> &lt;span class="s2">&amp;#34;/home/waxapple/.local/lib/python3.8/site-packages/nmigen/hdl/ast.py&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="mi">659&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="fm">__init__&lt;/span>
&lt;span class="k">raise&lt;/span> &lt;span class="ne">IndexError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Slice start {} must be less than slice stop {}&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">stop&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ne">IndexError&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Slice&lt;/span> &lt;span class="n">start&lt;/span> &lt;span class="mi">7&lt;/span> &lt;span class="n">must&lt;/span> &lt;span class="n">be&lt;/span> &lt;span class="n">less&lt;/span> &lt;span class="n">than&lt;/span> &lt;span class="nb">slice&lt;/span> &lt;span class="n">stop&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nb">slice&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">sig&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">Shape&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">width&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">signed&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">False&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Remember that since this is Python, negative indices are offsets from the end, so a way of getting the most significant bit is &lt;code>x[-1]&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nb">slice&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">sig&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="mi">15&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>You can use strides: &lt;code>x[0:8:2]&lt;/code> which is &lt;code>signal_name[start_bit:bits:strides]&lt;/code>.&lt;/p>
&lt;pre>&lt;code>&amp;gt;&amp;gt;&amp;gt; x[0:8:2]
(cat (slice (sig x) 0:1) (slice (sig x) 2:3) (slice (sig x) 4:5) (slice (sig x) 6:7))
&lt;/code>&lt;/pre>&lt;p>Note that taking bits range selection will always result in unsigned signal.&lt;br>
You can even assign to a piece of a signal:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">[:&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># same as the x[7:0] = {y[7:0]}; in verilog&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="tip-using-a-slice-when-comparing">Tip: Using a slice when comparing&lt;/h1>
&lt;p>In a situation like this:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">unsigned&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">unsigned&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">unsigned&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>We expect that if &lt;code>a+b&lt;/code> overflows, &lt;code>c&lt;/code> will just be the lower 16 bits of the result.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">unsigned&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">unsigned&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">z&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">z&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>However, z will be a 17-bit signal. So a 16-bit overflow is not a 17-bit overflow, and this will result in comparison failure. Such as &lt;code>a = 0xffff&lt;/code> and &lt;code>b = 0x0001&lt;/code>, the addition will be &lt;code>z = 0x10000&lt;/code>, which obviously not zero as we expected.&lt;br>
Therefore, be careful to slice the result&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">z&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)[:&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Alternatively, just use an intermediate signal (not recommanded):&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">tmp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">unsigned&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">tmp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">z&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tmp&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This becomes especially insidious when combining unsigned and signed signals:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">unsigned&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">unsigned&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">offset&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">signed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">ptr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">addr&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">offset&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>we expect &lt;code>ptr&lt;/code> to be a 16-bit value, since that is what we set it to be. However, what happens here?
Suppose &lt;code>addr&lt;/code> is 0 and &lt;code>offset&lt;/code> is -1. Will this comparison work? No, sorry my dear. It wouldn&amp;rsquo;t work.
Consider that &lt;code>adder&lt;/code> range from &lt;code>0x7FFF to 0xFFFF&lt;/code> and &lt;code>offset&lt;/code> range from &lt;code>0x7 to 0xF&lt;/code>, which is max((+32767 ~ -32768) + (+7 ~ -8) )= &lt;code>0x8006&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">addr&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">offset&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mh">0xFFFF&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>So the result of &lt;code>addr+offset&lt;/code> in this is -1, which 2&amp;rsquo;s complement 18-bit is &lt;code>0x3FFFF&lt;/code>. If we slice it, it will be &lt;code>0xFFFF&lt;/code>.&lt;/p>
&lt;h1 id="concatenating-signals">Concatenating signals&lt;/h1>
&lt;p>You can create a new signal out of other signals using &lt;code>Cat&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Cat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This concatenates the given signals &lt;em>first element last&lt;/em> This is important that a in the example above ends up as the least significant bits of x. That is, the concatenation of &lt;code>a&lt;/code> and &lt;code>b&lt;/code> is not &lt;code>ab&lt;/code> but &lt;code>ba&lt;/code>.&lt;br>
It is now easy to swap the bytes of a 16-bit signal:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sync&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Cat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">:],&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">[:&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">]))&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>You can also assign to a &lt;code>Cat&lt;/code>, so swapping the bytes can be accomplished in this way also:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sync&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">Cat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">:],&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">[:&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">])&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="replicating-signals">Replicating signals&lt;/h1>
&lt;p>You can replicate a signal by concatenating it to itself via &lt;code>Cat(x,x)&lt;/code>. But you can also replicate the signal via &lt;code>Repl(x,2)&lt;/code>
&lt;code>Repl&lt;/code> with &lt;code>Cat&lt;/code> can be used together to, for example, signed-extend a value:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">uint16&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">unsigned&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">int32&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">signed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">int32&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Cat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">uint16&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Repl&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">uint16&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">15&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Of course, the same can be done by simply using the right signal types:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">uint16&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">unsigned&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">int32&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">signed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">int32&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">uint16&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The generated cide will do the right thing.&lt;/p>
&lt;h1 id="arrays">Arrays&lt;/h1>
&lt;p>You can create an array of signals like this:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># All of these create an array of 3 16-bit elements:&lt;/span>
&lt;span class="c1"># Creates an array from a, b, c:&lt;/span>
&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">unsigned&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">unsigned&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">unsigned&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">abc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="c1"># Creates an array of 16-bit signals:&lt;/span>
&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">unsigned&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">)),&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">unsigned&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">)),&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">unsigned&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">])&lt;/span>
&lt;span class="c1"># Also creates an array of 16-bit signals, taking &lt;/span>
&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">unsigned&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="n">for_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)])&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>You can even create multidimensional arrays:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># Creates a 3 by 5 array of 16-bit signals:&lt;/span>
&lt;span class="n">yy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">Array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">unsigned&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)]&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">])&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>You can index into the array with a constant:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">z&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This will result in an &amp;ldquo;elaborate time&amp;rdquo; error if the index is out of bounds.
However, you can also index with another signal:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">unsigned&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">z&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Of course, during elaboration this will not result in any error. The actual result depends on runtime. It is best to ensure as much as possible that your access is not invalid. One way is to declare the index to only have a valid range.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">unsigned&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)])&lt;/span>
&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">z&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Of course, there is nothing to prevent &lt;code>i&lt;/code> from being 5, 6, or 7, since it is a 3-bit signal.
Another way is to simply deal with invalid values:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">unsigned&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)])&lt;/span>
&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">z&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Note here, it will still result in unexpected result.
In the end, you will have to &lt;code>formally verify&lt;/code> that i will only contain valid values.&lt;/p>
&lt;h1 id="records">Records&lt;/h1>
&lt;p>A &lt;code>Record&lt;/code> is a bundle of signals. To define a &lt;code>Record&lt;/code>, we first must define a &lt;code>Layout&lt;/code>.&lt;/p>
&lt;h2 id="layouts">Layouts&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen.hdl.rec&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="o">*&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">MyLayout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Layout&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">super&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__init__&lt;/span>&lt;span class="p">([&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">signal_name&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">layout&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="p">[,&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">direction&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">]),&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">signal_name&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">layout&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="p">[,&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">direction&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">]),&lt;/span>
&lt;span class="p">])&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Here is an example of a bus with 8-bit data, 16-bit address line, and some control signals:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">BusLayout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Layout&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">super&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__init__&lt;/span>&lt;span class="p">([&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;data&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">unsigned&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;addr&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">unsigned&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;wr&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;en&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="p">])&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>If your bus is very complex and easy to reuse another bus, you can define a bus by another bus.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">DataBusLayout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Layout&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">super&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__init__&lt;/span>&lt;span class="p">([&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;data&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">unsigned&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">])&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">AddrBusLayout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Layout&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">super&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__init__&lt;/span>&lt;span class="p">([&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;addr&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">unsigned&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">])&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">AllBusLayout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Layout&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">super&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__init__&lt;/span>&lt;span class="p">([&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;addr_bus&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">AddrBusLayout&lt;/span>&lt;span class="p">()),&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;data_bus&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">DataBusLayout&lt;/span>&lt;span class="p">()),&lt;/span>
&lt;span class="p">])&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="laying-out-a-record-with-a-layout">Laying out a record with a layout&lt;/h2>
&lt;p>Once a &lt;code>Layout&lt;/code> is defined, you can define a &lt;code>Record&lt;/code> using that &lt;code>Layout&lt;/code>, and use it as a signal:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">Bus&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Record&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">super&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BusLayout&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="c1"># Later in a module:&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bus&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Bus&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bus&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0xFF&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sync&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bus&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># Can assign a bus by a bus&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bus2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Bus&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bus2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bus&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="directions-and-connecting-records">Directions and connecting records&lt;/h1>
&lt;p>It is often advantageous to define signals so that the zero value means either invalid or inactive. That way, you can have many of those signals and logical-or them together. For example, you might have three modules, each of which output a one-bit write signal, but only one module will write at a time. Then if your write signal is active high( zeros means no write), you can simply logical-or the write signal from each module together to get a master write signal.
&lt;img src="https://i.imgur.com/114qlux.png" alt="Imgur">&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">master_record&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Bus&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">master_record&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">connect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bus1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bus2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bus3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The &lt;code>connect&lt;/code> method on a record returns an array of statement which logical-ors each signal together.
The exactly same thing could be accomplished &amp;ldquo;manually&amp;rdquo;.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">master_record&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Bus&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">master_record&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bus1&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">bus2&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">bus3&lt;/span> &lt;span class="o">|...&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The disadvantage is that &lt;code>connect&lt;/code> can connect &lt;em>parts&lt;/em> of records, if the field names matched. In this sense, the &amp;ldquo;subordinate&amp;rdquo; records must have every signal that the &amp;ldquo;master&amp;rdquo; record has. That is, the &amp;ldquo;subordinate&amp;rdquo; records can have extra signals, but the &amp;ldquo;master&amp;rdquo; record must not.&lt;br>
Fan-out is where each subordinate record gets a copy of the master record. If the direction of each signal in the layout of record is &lt;code>DIR_FANOUT&lt;/code>, then you can connect several records to a &amp;ldquo;master&amp;rdquo; record like this:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">master_record&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Bus&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">master_record&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">connect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bus1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bus2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bus3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The syntax is exactly the same, but the direction is different, from master record to each subordinate record. Again, you could do this &amp;ldquo;manually&amp;rdquo;:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">master_record&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Bus&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="n">bus1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">master_record&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">bus2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">master_record&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">bus3&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">master_record&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>But this is longer, and also doesn&amp;rsquo;t handle when the master record has extra signals that not in the subordinate records.&lt;/p></content></entry><entry><title type="text">[Day03] Branching</title><link rel="alternate" type="text/html" href="https://waxpple.github.io/posts/day03/"/><id>https://waxpple.github.io/posts/day03/</id><updated>2021-07-25T12:08:18+00:00</updated><published>2021-07-12T14:38:07+08:00</published><author><name>Waxapple</name><uri>https://waxpple.github.io/</uri><email>a0910618112@gmail.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html">If-Elif-Else you cannot use the standard python if-elif-else statements to create statements. Instead, using nMigen branching.
1 2 3 4 5 6 with m.If(condition1): m.d.comb += statements1 with m.Elif(condition2): m.d.comb += statements2 with m.Else(): m.d.comb += statements3 If you use regular Python if-elif-else, then those will be evaluated during generation of the logic, not the logic itself.</summary><content type="html">&lt;h1 id="if-elif-else">If-Elif-Else&lt;/h1>
&lt;p>you cannot use the standard python &lt;code>if-elif-else&lt;/code> statements to create statements. Instead, using nMigen branching.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">with&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">If&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">condition1&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">statements1&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Elif&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">condition2&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">statements2&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Else&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">statements3&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>If you use regular Python &lt;code>if-elif-else&lt;/code>, then those will be evaluated during &lt;em>generation&lt;/em> of the logic, not the logic itself. This can be useful if you want a flag to cause different logic implement to be generated, and this is a good use of platform string pass to elaborate().&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">platform&lt;/span>&lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;KC705&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">statement1&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">statement2&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>If &lt;code>platform&lt;/code> is &lt;code>&amp;quot;KC705&amp;quot;&lt;/code> then statement1 will be implement in generated hardware, otherwise only statement2 will be implement in the design.&lt;/p>
&lt;h1 id="conditions">Conditions&lt;/h1>
&lt;p>The conditions in &lt;code>If-Elif-Else&lt;/code> are cimparisons, for example &lt;code>a == 1&lt;/code> or &lt;code>(a &amp;gt;= b) &amp;amp; (a &amp;lt;= c)&lt;/code>. Note that each comparison will be one-bit comparison.&lt;br>
If you have a signal with more than one bit and use it as the condition, use &lt;code>with m.If(a):&lt;/code>, then the condition will be true if any bit in a is 1.&lt;/p>
&lt;h1 id="switch-case-default">Switch-Case-Default&lt;/h1>
&lt;p>You can use &lt;code>Switch-Case-Default&lt;/code> just as in standard HDLs using the following &lt;code>with&lt;/code> constructs:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">with&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Switch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">expression&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Case&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value1&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">statements1&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Case&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value2&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">statements2&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Default&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">statements3&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Although it is suggested that using &lt;code>full-case&lt;/code> switch that we used to do in verilog. You can use multiple values in one case statement.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">with&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Switch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">expression&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Case&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">value2&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">statements1&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Default&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">statements3&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>You can leave out the &lt;code>Defalt()&lt;/code>, but not suggest you to do that.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Case&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In this example, if &lt;code>y is in [0, 1, 2]&lt;/code> then &lt;code>x&lt;/code> is assigned 2. Otherwise &lt;code>x&lt;/code> retains its value of 1.&lt;/p>
&lt;ul>
&lt;li>Recall the section on overriding statements. One signal can only assigned in only one clock domain.&lt;/li>
&lt;/ul>
&lt;h1 id="specify-a-bit-patterns">Specify a bit patterns&lt;/h1>
&lt;p>The way to specify a matching pattern in a &lt;code>Case&lt;/code> is with a Python string of binary digits. For example, &lt;code>&amp;quot;0011101011&amp;quot;&lt;/code>. A don&amp;rsquo;t-care bit is specified using a dash &lt;code>-&lt;/code>, so for example &lt;code>&amp;quot;00111-----&amp;quot;&lt;/code>. The number of bits in the string must exactly the same as the number of bits in the expression it is being compared to.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">with&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">If&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">matches&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;11---&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;span class="n">statement1&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Is equivelent to&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">with&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Switch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Case&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;11---&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">statement1&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></content></entry><entry><title type="text">[Day02] Basic terminology</title><link rel="alternate" type="text/html" href="https://waxpple.github.io/posts/day02/"/><id>https://waxpple.github.io/posts/day02/</id><updated>2021-07-25T12:08:18+00:00</updated><published>2021-07-12T10:01:41+08:00</published><author><name>Waxapple</name><uri>https://waxpple.github.io/</uri><email>a0910618112@gmail.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html">Domains A domain in its basic definition, is a grouping of logic cells. If consider a module as a blackbox. With its inputs and outputs, any given output is generated within one and only one domain.
Modules come with two domain built in: a combinational domain and a sequential(synchronous) domain.</summary><content type="html">&lt;h1 id="domains">Domains&lt;/h1>
&lt;p>A &lt;em>domain&lt;/em> in its basic definition, is a grouping of logic cells. If consider a module as a blackbox. With its inputs and outputs, any given output is generated within one and only one domain.&lt;br>
&lt;code>Modules&lt;/code> come with two domain built in: a combinational domain and a sequential(synchronous) domain.&lt;/p>
&lt;h1 id="combinational">Combinational&lt;/h1>
&lt;p>Logic that contains no clocked elements is called combinational logic. This is one of the domain that a &lt;code>Module&lt;/code> contains. It is always named &lt;code>comb&lt;/code>, and it can be accessed via m.d.comb.&lt;br>
m means &lt;code>Module&lt;/code> and d means &lt;code>domain&lt;/code>.&lt;/p>
&lt;h1 id="synchronous">Synchronous&lt;/h1>
&lt;p>Logic that contains clocked elements is called synchronous (a.k.a sequential circuit) because all the FFs are triggered by particular clock domain. Each clock domain also has a reset signal which can reset all FFs to a given state. Finally, the domain specifies the edge of its clock on which all the FFs change: &lt;code>posedge&lt;/code> or &lt;code>negedge&lt;/code>.&lt;br>
Unless otherwise specified, there is one synchronous domain in a &lt;code>Module&lt;/code> called sync. It can be accessed via &lt;code>m.d.sync&lt;/code>.&lt;/p>
&lt;h1 id="creating-more-domains">Creating more domains&lt;/h1>
&lt;p>There is no reason to create combinational domains. As mentioned above, modules already contain one combinational domain, comb.&lt;br>
You can create a synchronous clock domain using &lt;code>ClockDomain(&amp;quot;&amp;lt;domain-name&amp;gt;&amp;quot;, clk_edge=&amp;quot;pos|neg&amp;quot;)&lt;/code>. This gives you both the clock and the reset signal for the domain. By default, the domain name is &lt;code>sync&lt;/code> and the clock edge is &lt;code>pos&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">mydomain&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ClockDomain&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;clk&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">domains&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">mydomain&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mydomain&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="c1"># logic to add in the &amp;#34;mydomain&amp;#34; clock domain.&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>You can access a domain within a module by its name. So a domain created via ClockDomain(&amp;ldquo;my clock&amp;rdquo;) is accessed via &lt;code>m.d.myclock&lt;/code> or &lt;code>m.d[&amp;quot;myclk&amp;quot;]&lt;/code>. \&lt;/p>
&lt;ul>
&lt;li>&lt;code>ClockSignal(domain=&amp;quot;&amp;lt;domain&amp;gt;&amp;quot;)&lt;/code> gives you the clock signal for the given domain.&lt;/li>
&lt;li>&lt;code>ResetSignal(domain=&amp;quot;&amp;lt;domain&amp;gt;&amp;quot;)&lt;/code> gives you the reset signal for the given domain.&lt;/li>
&lt;/ul>
&lt;h1 id="tips-clock-domains-with-the-same-clock-but-different-edges">Tips: Clock domains with the same clock but different edges.&lt;/h1>
&lt;p>This can be done simply by creating one &lt;code>clockdomain&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">pos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ClockDomain&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;pos&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">neg&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ClockDomain&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;neg&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">clk_edge&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;neg&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Next, assign them with same clock driven&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">neg&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">clk&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pos&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">clk&lt;/span>
&lt;span class="n">neg&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rst&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pos&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rst&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>And then you can add these to the module. We can add more than domain to a module with the same statement.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">domains&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">pos&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">neg&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="access-to-domains">Access to domains&lt;/h1>
&lt;p>A module can access its domains via its &lt;code>d&lt;/code> attribute. By default, if a synchronous domain is added to a module&amp;rsquo;s &lt;code>domain&lt;/code>, then all modules everywhere will also have access to that domain via their d attribute, even if that module is not a submodule of the module where the domain was added.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">domains&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">ClockDomain&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;thing&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">thing&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="c1"># logic&lt;/span>
&lt;span class="c1"># This is implicity &lt;/span>
&lt;span class="n">m2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">thing&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="c1">#logic&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>If you want to explicitly inhibit this global propagation by setting the &lt;code>local&lt;/code> named parameter of the &lt;code>ClockDomain&lt;/code> to &lt;code>True&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">domains&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">ClockDomain&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;thing&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">local&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">thing&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="c1"># logic&lt;/span>
&lt;span class="c1"># Error will occur here.&lt;/span>
&lt;span class="n">m2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">thing&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="c1"># logic&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="ports">Ports&lt;/h1>
&lt;p>The equivalent of ports in a module is public attributes. In the following example, &lt;code>a&lt;/code> and &lt;code>data&lt;/code> are publicly available to other modules, while &lt;code>b&lt;/code> is not, just as &lt;code>a&lt;/code> and &lt;code>data&lt;/code> are publicly available to other python classes, and &lt;code>b&lt;/code> is not.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">ThingBlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Elaboratable&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="c1"># Public accessible&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">elaborate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">platform&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="c1"># Internal use reg/wire.&lt;/span>
&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">m&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="resetdefault-values-for-signals">Reset/default values for signals&lt;/h1>
&lt;p>If a &lt;code>Signal&lt;/code> is set in the &lt;em>combinational&lt;/em> or &lt;em>synchronous&lt;/em> domain, then you can specify the default value of the signal if it is not set. By default value of the signal if it is not set. By default, it is zero, but for a non-zero value, you can specify the default value for a signal when constructing the signal by setting the &lt;code>reset&lt;/code> named parameter in the constructor. For example, this create a 16-bit signed signal, self.x, which initial value set to 0xFFFF.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">signed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">reset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mh">0xFFFF&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># initial value &amp;#34;0xFFFF&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="explicitly-not-resetting">Explicitly not resetting&lt;/h1>
&lt;p>For synchronous signals(that is, a signal set in a synchronous domain), you can specify that it is not reset on the reset signal, instead only getting an initial balue on power-up. This is done by setting the &lt;code>reset_less&lt;/code> named parameter in the constructor to &lt;code>True&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">signed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="n">reset&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="mh">0xFFFF&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">reset_less&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This is especially useful during simulation or formal verification where you want to activate the reset, but keep some signals &amp;ldquo;outside&amp;rdquo; the reset. For example, a cycle counter that maintains its count across resets.&lt;/p>
&lt;h1 id="basic-operations">Basic operations&lt;/h1>
&lt;h2 id="statements">Statements&lt;/h2>
&lt;p>nMigen doesn&amp;rsquo;t convert Python to hardware. In essence, what you are writing using nMigen is a &lt;em>generator&lt;/em> of logic, not the logic itself. So if you want to assign one &lt;code>Value&lt;/code> to take the value of another, you don&amp;rsquo;t write &lt;code>a = b&lt;/code>, but instead you call the method of &lt;code>a&lt;/code> that generates the equality: &lt;code>a.eq(b)&lt;/code>. This is known as a &lt;em>statement&lt;/em>.&lt;br>
However, many math operators are overridable in Python, since these translate to calls to Python functions. So for example, you can write &lt;code>a.eq(b+1)&lt;/code> instead of something like a.eq(b.plus(1)) because Python addition can be overrideen to a function callm and nMigen&amp;rsquo;s Signal class does that for all such operators (&lt;code>=&lt;/code> is still not overrided).&lt;/p>
&lt;h2 id="list-of-directly-translatable-python-operators">List of directly translatable Python operators&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Operator&lt;/th>
&lt;th style="text-align:center">Operation&lt;/th>
&lt;th>Notes&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>~&lt;/code>&lt;/td>
&lt;td style="text-align:center">inversion&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>-&lt;/code>&lt;/td>
&lt;td style="text-align:center">arithmetic negation&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>+&lt;/code>&lt;/td>
&lt;td style="text-align:center">addition&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>*&lt;/code>&lt;/td>
&lt;td style="text-align:center">multiplication&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>%&lt;/code>&lt;/td>
&lt;td style="text-align:center">modulus&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>//&lt;/code>&lt;/td>
&lt;td style="text-align:center">division&lt;/td>
&lt;td>integer division, rounding down&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;lt;&amp;lt;&lt;/code>&lt;/td>
&lt;td style="text-align:center">shift left&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;gt;&amp;gt;&lt;/code>&lt;/td>
&lt;td style="text-align:center">shift right&lt;/td>
&lt;td>Effectively arithmetic, see below.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;amp;&lt;/code>&lt;/td>
&lt;td style="text-align:center">bitwise and&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>`&lt;/td>
&lt;td style="text-align:center">`&lt;/td>
&lt;td>bitwise or&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>^&lt;/code>&lt;/td>
&lt;td style="text-align:center">bitwise xor&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>==&lt;/code>&lt;/td>
&lt;td style="text-align:center">equality&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>!=&lt;/code>&lt;/td>
&lt;td style="text-align:center">inequality&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;gt;&lt;/code>&lt;/td>
&lt;td style="text-align:center">greater than&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;gt;=&lt;/code>&lt;/td>
&lt;td style="text-align:center">greater than or equal to&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;lt;&lt;/code>&lt;/td>
&lt;td style="text-align:center">less than&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;lt;=&lt;/code>&lt;/td>
&lt;td style="text-align:center">less than equal to&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>Note that there are no translatable Python logical operators (&lt;code>and&lt;/code>,&lt;code>or&lt;/code>). The logical reduction functions &lt;code>any&lt;/code> and &lt;code>all&lt;/code> are not avaliable in nMigen expressions.&lt;br>
Attemped to convert nMigen value to boolean error will occur.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Shift right is effectively arithmetic, where the sign bit is present for signed values or zero for unsigned Values.&lt;/p>
&lt;/blockquote>
&lt;h1 id="effects-of-operations-on-result-width">Effects of operations on result width&lt;/h1>
&lt;p>Two unsigned/signed 4-bit signals addition will result in unsigned/signed 5-bit result.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">s1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">signed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">s2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">signed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">v2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">s1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">s2&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">v2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">Shape&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">width&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">signed&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="multiplexing-signals">Multiplexing signals&lt;/h1>
&lt;p>&lt;code>Mux()&lt;/code> returns one signal if the condition is true, the other signal otherwise:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">y&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Mux&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cond&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">x1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">x2&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In this case, if &lt;code>cond&lt;/code> is true then &lt;code>y&lt;/code> is set to x1, otherwise x2. It is the same as &lt;code>y = cond?x1:x2;&lt;/code>.&lt;br>
&lt;code>Mux&lt;/code> cannot be used on the left-hand side of any assignment.&lt;/p>
&lt;h1 id="placing-statements-in-domains">Placing statements in domains&lt;/h1>
&lt;p>Statements are written in the combinational domain of a module as we used to in verilog. Ofcourse, can be used in sequential circuits.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># Combinational circuit&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># Sequential circuit&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sync&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>For example, y is &lt;code>IDLE&lt;/code> and x is next_state.&lt;/p>
&lt;h1 id="adding-multiple-statements">Adding multiple statements&lt;/h1>
&lt;p>The &lt;code>+=&lt;/code> operator for a domain can take one statement, or a list of statements, which is pretty ease to use.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">z&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="conflict-statements-will-be-override">Conflict statements will be override&lt;/h1>
&lt;p>If a statement sets the same signal that previous statement set, the the second set takes precedence.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In this case, x will get y+2 not y+1.
Remember that one signal can only be assigned to one domains, otherwise, it will result in a driver-driver conflict.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># Wrong code&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">comb&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sync&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></content></entry><entry><title type="text">[Day01] Basic nMigen</title><link rel="alternate" type="text/html" href="https://waxpple.github.io/posts/day01/"/><id>https://waxpple.github.io/posts/day01/</id><updated>2021-07-25T12:08:18+00:00</updated><published>2021-07-10T10:50:02+08:00</published><author><name>Waxapple</name><uri>https://waxpple.github.io/</uri><email>a0910618112@gmail.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html">Basic structure of modules The tutorial is followed by https://github.com/RobertBaruch/nmigen-tutorial/ Thumbs up for his contributions.
1 2 3 4 5 6 7 8 9 from nmigen import * from nmigen.build import Platform class ThingBlock(Elaboratable): def __init__(self): pass def elaborate(self, platform: Platform) -&amp;gt; Module: m = Module() return m Elaborating a module 1 2 3 4 5 6 7 8 9 10 11 from nmigen.</summary><content type="html">&lt;h1 id="basic-structure-of-modules">Basic structure of modules&lt;/h1>
&lt;p>The tutorial is followed by &lt;a href="https://github.com/RobertBaruch/nmigen-tutorial/">https://github.com/RobertBaruch/nmigen-tutorial/&lt;/a>
Thumbs up for his contributions.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="o">*&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen.build&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Platform&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">ThingBlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Elaboratable&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">pass&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">elaborate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">platform&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Platform&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">m&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="elaborating-a-module">Elaborating a module&lt;/h1>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen.cli&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">main&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span>&lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">sync&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ClockDomain&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">block&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ThingBlock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Module&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">domains&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">sync&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">submodules&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">block&lt;/span>
&lt;span class="n">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ports&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">sync&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">clk&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">sync&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rst&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>main(module, ports=[&lt;ports>], platform=&amp;quot;&lt;platform>&amp;quot;) translate the given module into verilog. This is call &lt;em>elaboration&lt;/em>. All elaborate() medthod will have its platform argument set to the given platform like particular chips or evaluation boards.&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>python3 thing.py generate -t [v|il] &amp;gt; thing.[v|il]
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>If you encounter any error message, Back to day00 and install the pre-requisties.&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>Choose RTLIL if using yosys.&lt;/li>
&lt;/ul></content></entry><entry><title type="text">[Day00] nMigen 戰鬥</title><link rel="alternate" type="text/html" href="https://waxpple.github.io/posts/day00/"/><id>https://waxpple.github.io/posts/day00/</id><updated>2021-07-25T12:08:18+00:00</updated><published>2021-07-09T14:33:00+08:00</published><author><name>Waxapple</name><uri>https://waxpple.github.io/</uri><email>a0910618112@gmail.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html">第一天接觸nMigen, 先來安裝　nMigen! 安裝Prerequisites sudo apt-get install build-essential clang bison flex libreadline-dev \ gawk tcl-dev libffi-dev git mercurial graphviz \ xdot pkg-config python python3 libftdi-dev gperf \ libboost-program-options-dev autoconf libgmp-dev \ cmake 安裝有的沒的必備程式 參考 https://symbiyosys.readthedocs.io/en/latest/install.html
安裝nMigen pip install git+https://github.com/m-labs/nmigen.git pip install git+https://github.com/m-labs/nmigen-boards.git 安裝之後就可以開始學習如何使用nMigen製作電路</summary><content type="html">&lt;h1 id="第一天接觸nmigen-先來安裝nmigen">第一天接觸nMigen, 先來安裝　nMigen!&lt;/h1>
&lt;p>&lt;img src="https://m-labs.hk/images/migen@2x.png?h=43d4e86170d805ce58f90901ae31a64141ea32606f7cefcb4b2b165e362c2b9a" alt="1">&lt;/p>
&lt;h1 id="安裝prerequisites">安裝Prerequisites&lt;/h1>
&lt;pre>&lt;code>sudo apt-get install build-essential clang bison flex libreadline-dev \
gawk tcl-dev libffi-dev git mercurial graphviz \
xdot pkg-config python python3 libftdi-dev gperf \
libboost-program-options-dev autoconf libgmp-dev \
cmake
&lt;/code>&lt;/pre>&lt;h1 id="安裝有的沒的必備程式">安裝有的沒的必備程式&lt;/h1>
&lt;p>參考 &lt;a href="https://symbiyosys.readthedocs.io/en/latest/install.html">https://symbiyosys.readthedocs.io/en/latest/install.html&lt;/a>&lt;/p>
&lt;h1 id="安裝nmigen">安裝nMigen&lt;/h1>
&lt;pre>&lt;code>pip install git+https://github.com/m-labs/nmigen.git
pip install git+https://github.com/m-labs/nmigen-boards.git
&lt;/code>&lt;/pre>&lt;p>安裝之後就可以開始學習如何使用nMigen製作電路&lt;/p>
&lt;ul>
&lt;li>Boolector (important!)&lt;/li>
&lt;/ul>
&lt;pre>&lt;code># Download and build Boolector
git clone https://github.com/boolector/boolector
cd boolector
# Download and build Lingeling
./contrib/setup-lingeling.sh
# Download and build BTOR2Tools
./contrib/setup-btor2tools.sh
# Build Boolector
./configure.sh &amp;amp;&amp;amp; cd build &amp;amp;&amp;amp; make
./configure.sh --py3
cd build
make
sudo cp build/bin/{boolector,btor*} /usr/local/bin/
sudo cp deps/btor2tools/bin/btorsim /usr/local/bin/
&lt;/code>&lt;/pre>&lt;h1 id="value-in-migen">Value in migen&lt;/h1>
&lt;h2 id="const-永不變">Const 永不變&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="o">*&lt;/span>
&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Const&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">Shape&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">width&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">signed&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">False&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Const&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">Shape&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">width&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">signed&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Const&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">Shape&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">width&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">signed&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="可以使用enum-來做常數狀態">可以使用Enum 來做常數狀態&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">enum&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Enum&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">unique&lt;/span>
&lt;span class="nd">@unique&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Enum&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">NONE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="n">ADD&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="n">SUB&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="n">MUL&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;span class="n">DIV&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">4&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Const&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Func&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">unsigned&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Value&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">cast&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Func&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">NONE&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span>
&lt;span class="n">const&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="s1">&amp;#39;d0&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="signal-是-wire或者reg">Signal 是 Wire或者reg&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="kn">from&lt;/span> &lt;span class="nn">nmigen&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="o">*&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">A&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">signed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">Shape&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">width&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">signed&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">Shape&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">width&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">signed&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Func&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="n">sig&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">unsigned&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;dout&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>
&lt;span class="s1">&amp;#39;dout&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;blockquote>
&lt;p>但是我安裝Miniconda 後整個WSL的ssl都掛了，建議不要安裝&lt;/p>
&lt;h1 id="安裝miniconda">安裝Miniconda&lt;/h1>
&lt;p>因為我是用WSL，也沒有GUI，就直接用miniconda就好了。&lt;/p>
&lt;pre>&lt;code>wget https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh
chmod +x Miniconda3-py39_4.9.2-Linux-x86_64.sh
./Miniconda3-py39_4.9.2-Linux-x86_64.sh
&lt;/code>&lt;/pre>&lt;/blockquote></content></entry></feed>