[{"categories":null,"content":"Basic structure of modules from nmigen import * from nmigen.build import Platform class ThingBlock(Elaboratable): def __init__(self): pass def elaborate(self, platform: Platform) -\u003e Module: m = Module() return m Elaborating a module from nmigen.cli import main if __name__== \"__main__\": sync = ClockDomain() block = ThingBlock() m = Module() m.domains += sync m.submodules += block main(m, ports=[sync.clk,sync.rst])  main(module, ports=[], platform=\"\") translate the given module into verilog. This is call elaboration. All elaborate() medthod will have its platform argument set to the given platform like particular chips or evaluation boards.  python3 thing.py generate -t [v|il] \u003e thing.[v|il]  Choose RTLIL if using yosys.  ","description":"","tags":null,"title":"[Day01] Basic nMigen","uri":"/posts/day01/"},{"categories":null,"content":"第一天接觸nMigen, 先來安裝　nMigen! 安裝Prerequisites sudo apt-get install build-essential clang bison flex libreadline-dev \\ gawk tcl-dev libffi-dev git mercurial graphviz \\ xdot pkg-config python python3 libftdi-dev gperf \\ libboost-program-options-dev autoconf libgmp-dev \\ cmake 安裝有的沒的必備程式 參考 https://symbiyosys.readthedocs.io/en/latest/install.html\n安裝nMigen pip install git+https://github.com/m-labs/nmigen.git pip install git+https://github.com/m-labs/nmigen-boards.git 安裝之後就可以開始學習如何使用nMigen製作電路\nValue in migen Const 永不變 from nmigen import * a = Const(10) a.shape() \u003e\u003e Shape(width=4, signed=False) a = Const(10) a.shape() \u003e\u003e Shape(width=5, signed=True) x = Const(3,range(-5,11)) x.shape() \u003e\u003e Shape(width=5, signed=True) 可以使用Enum 來做常數狀態 from enum import Enum, unique @unique class Func(Enum): NONE = 0 ADD = 1 SUB = 2 MUL = 3 DIV = 4 ... \u003e\u003e\u003e x = Const(2, Func) \u003e\u003e\u003e x.shape() unsigned(3) \u003e\u003e\u003e x = Value.cast(Func.NONE) \u003e\u003e\u003e x const 3'd0 Signal 是 Wire或者reg \u003e\u003e\u003e from nmigen import * \u003e\u003e\u003e A = Signal(signed(8)) \u003e\u003e\u003e A.shape() Shape(width=8, signed=True) \u003e\u003e\u003e x = Signal(range(-5,11)) \u003e\u003e\u003e x.shape() Shape(width=5, signed=True) \u003e\u003e\u003e x = Signal(Func) \u003e\u003e\u003e x (sig x) \u003e\u003e\u003e x = Signal(unsigned(16),name=\"dout\") \u003e\u003e\u003e x.name 'dout'   但是我安裝Miniconda 後整個WSL的ssl都掛了，建議不要安裝\n安裝Miniconda 因為我是用WSL，也沒有GUI，就直接用miniconda就好了。\nwget https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh chmod +x Miniconda3-py39_4.9.2-Linux-x86_64.sh ./Miniconda3-py39_4.9.2-Linux-x86_64.sh  ","description":"","tags":null,"title":"[Day00] nMigen 戰鬥","uri":"/posts/day00/"},{"categories":null,"content":"Test a text\nfunction test(){ console.log(\"Hello world!\"); } ","description":"","tags":null,"title":"Hello World","uri":"/posts/hello-world/"}]