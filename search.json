[{"categories":null,"content":"Spliting and combining signals Slicing signals We can get the least significant bit by x[0] or the most significant bit by x[15].\n\u003e\u003e\u003e from nmigen import * \u003e\u003e\u003e x = Signal(16) \u003e\u003e\u003e x (sig x) \u003e\u003e\u003e x.shape() Shape(width=16, signed=False) \u003e\u003e\u003e x[15] (slice (sig x) 15:16) \u003e\u003e\u003e x[15].shape() Shape(width=1, signed=False) While x[7:0] is the way to extract the eight least significant bits in verilog.But in nMigen we use x[0:8] or x[:8]. It will be Signal_name[start_bit:bits].\n\u003e\u003e\u003e x[7:0] Traceback (most recent call last): File \"\u003cstdin\u003e\", line 1, in \u003cmodule\u003e File \"/home/waxapple/.local/lib/python3.8/site-packages/nmigen/hdl/ast.py\", line 238, in __getitem__ return Slice(self, start, stop) File \"/home/waxapple/.local/lib/python3.8/site-packages/nmigen/hdl/ast.py\", line 659, in __init__ raise IndexError(\"Slice start {} must be less than slice stop {}\".format(start, stop)) IndexError: Slice start 7 must be less than slice stop 0 \u003e\u003e\u003e x[0:8] (slice (sig x) 0:8) \u003e\u003e\u003e x[0:8].shape() Shape(width=8, signed=False) Remember that since this is Python, negative indices are offsets from the end, so a way of getting the most significant bit is x[-1].\n\u003e\u003e\u003e x[-1] (slice (sig x) 15:16) You can use strides: x[0:8:2] which is signal_name[start_bit:bits:strides].\n\u003e\u003e\u003e x[0:8:2] (cat (slice (sig x) 0:1) (slice (sig x) 2:3) (slice (sig x) 4:5) (slice (sig x) 6:7)) Note that taking bits range selection will always result in unsigned signal.\nYou can even assign to a piece of a signal:\nm.d.comb += x[:8].eq(y) # same as the x[7:0] = {y[7:0]}; in verilog Tip: Using a slice when comparing In a situation like this:\na = Signal(unsigned(16)) b = Signal(unsigned(16)) c = Signal(unsigned(16)) m.d.comb += c.eq(a+b) We expect that if a+b overflows, c will just be the lower 16 bits of the result.\na = Signal(unsigned(16)) b = Signal(unsigned(16)) z = Signal() m.d.comb += z.eq((a+b)== 0) However, z will be a 17-bit signal. So a 16-bit overflow is not a 17-bit overflow, and this will result in comparison failure. Such as a = 0xffff and b = 0x0001, the addition will be z = 0x10000, which obviously not zero as we expected.\nTherefore, be careful to slice the result\nm.d.comb += z.eq((a+b)[:16] == 0) Alternatively, just use an intermediate signal (not recommanded):\ntmp = Signal(unsigned(16)) m.d.comb += tmp.eq(a+b) m.d.comb += z.eq(tmp == 0) This becomes especially insidious when combining unsigned and signed signals:\nptr = Signal(unsigned(16)) addr = Signal(unsigned(16)) offset = Signal(signed(5)) m.d.comb += ptr.eq(addr + offset) we expect ptr to be a 16-bit value, since that is what we set it to be. However, what happens here? Suppose addr is 0 and offset is -1. Will this comparison work? No, sorry my dear. It wouldn’t work. Consider that adder range from 0x7FFF to 0xFFFF and offset range from 0x7 to 0xF, which is max((+32767 ~ -32768) + (+7 ~ -8) )= 0x8006\ny = Signal() m.d.comb += y.eq((addr + offset) == 0xFFFF ) So the result of addr+offset in this is -1, which 2’s complement 18-bit is 0x3FFFF. If we slice it, it will be 0xFFFF.\nConcatenating signals You can create a new signal out of other signals using Cat:\nm.d.comb += x.eq(Cat(a, b, ...)) This concatenates the given signals first element last This is important that a in the example above ends up as the least significant bits of x. That is, the concatenation of a and b is not ab but ba.\nIt is now easy to swap the bytes of a 16-bit signal:\nm.d.sync += x.eq(Cat(x[8:], x[:8])) You can also assign to a Cat, so swapping the bytes can be accomplished in this way also:\nm.d.sync += Cat(x[8:], x[:8]).eq(x) Replicating signals You can replicate a signal by concatenating it to itself via Cat(x,x). But you can also replicate the signal via Repl(x,2) Repl with Cat can be used together to, for example, signed-extend a value:\nuint16 = Signal(unsigned(16)) int32 = Signal(signed(32)) m.d.comb += int32.eq(Cat(uint16, Repl(uint16[15],16))) Of course, the same can be done by simply using the right signal types:\nuint16 = Signal(unsigned(16)) int32 = Signal(signed(32)) m.d.comb += int32.eq(uint16) The generated cide will do the right thing.\nArrays You can create an array of signals like this:\n# All of these create an array of 3 16-bit elements: # Creates an array from a, b, c: a = Signal(unsigned(16)) b = Signal(unsigned(16)) c = Signal(unsigned(16)) abc = Array([a, b, c]) # Creates an array of 16-bit signals: x = Array([Signal(unsigned(16)), Signal(unsigned(16)), Signal(unsigned(16)) ]) # Also creates an array of 16-bit signals, taking y = Array([Signal(unsigned(16)) for_ in range(3)]) You can even create multidimensional arrays:\n# Creates a 3 by 5 array of 16-bit signals: yy = Array([Array[Signal(unsigned(16)) for _ in range(5)] for _ in range(3) ]) You can index into the array with a constant:\nz = y[2] This will result in an “elaborate time” error if the index is out of bounds. However, you can also index with another signal:\ni = Signal(unsigned(16)) z = y[i] Of course, during elaboration this will not result in any error. The actual result depends on runtime. It is best to ensure as much as possible that your access is not invalid. One way is to declare the index to only have a valid range.\ny = Array([Signal(unsigned(16)) for _ in range(5)]) i = Signal.range(5) z = y[i] Of course, there is nothing to prevent i from being 5, 6, or 7, since it is a 3-bit signal. Another way is to simply deal with invalid values:\ny = Array([Signal(unsigned(16)) for _ in range(5)]) i = Signal.range(5) z = y[i % 4] Note here, it will still result in unexpected result. In the end, you will have to formally verify that i will only contain valid values.\nRecords A Record is a bundle of signals. To define a Record, we first must define a Layout.\nLayouts from nmigen.hdl.rec import * class MyLayout(Layout): def __init__(self): super().__init__([ (\u003csignal_name\u003e, \u003cshape|layout\u003e [, \u003cdirection\u003e]), (\u003csignal_name\u003e, \u003cshape|layout\u003e [, \u003cdirection\u003e]), ]) Here is an example of a bus with 8-bit data, 16-bit address line, and some control signals:\nclass BusLayout(Layout): def __init__(self): super().__init__([ (\"data\", unsigned(8)), (\"addr\", unsigned(16)), (\"wr\",1), (\"en\",1), ]) If your bus is very complex and easy to reuse another bus, you can define a bus by another bus.\nclass DataBusLayout(Layout): ","description":"","tags":null,"title":"[Day04] Bit selection","uri":"/posts/day04/"},{"categories":null,"content":"If-Elif-Else you cannot use the standard python if-elif-else statements to create statements. Instead, using nMigen branching.\nwith m.If(condition1): m.d.comb += statements1 with m.Elif(condition2): m.d.comb += statements2 with m.Else(): m.d.comb += statements3 If you use regular Python if-elif-else, then those will be evaluated during generation of the logic, not the logic itself. This can be useful if you want a flag to cause different logic implement to be generated, and this is a good use of platform string pass to elaborate().\nif (platform== \"KC705\") m.d.comb += statement1 else: m.d.comb += statement2 If platform is \"KC705\" then statement1 will be implement in generated hardware, otherwise only statement2 will be implement in the design.\nConditions The conditions in If-Elif-Else are cimparisons, for example a == 1 or (a \u003e= b) \u0026 (a \u003c= c). Note that each comparison will be one-bit comparison.\nIf you have a signal with more than one bit and use it as the condition, use with m.If(a):, then the condition will be true if any bit in a is 1.\nSwitch-Case-Default You can use Switch-Case-Default just as in standard HDLs using the following with constructs:\nwith m.Switch(expression): with m.Case(value1): statements1 with m.Case(value2): statements2 with m.Default(): statements3 Although it is suggested that using full-case switch that we used to do in verilog. You can use multiple values in one case statement.\nwith m.Switch(expression): with m.Case(value1,value2): statements1 with m.Default(): statements3 You can leave out the Defalt(), but not suggest you to do that.\nm.d.comb += x.eq(1) with m.Switch (y): with m.Case(0,1,2): m.d.comb += x.eq(2) In this example, if y is in [0, 1, 2] then x is assigned 2. Otherwise x retains its value of 1.\n Recall the section on overriding statements. One signal can only assigned in only one clock domain.  Specify a bit patterns The way to specify a matching pattern in a Case is with a Python string of binary digits. For example, \"0011101011\". A don’t-care bit is specified using a dash -, so for example \"00111-----\". The number of bits in the string must exactly the same as the number of bits in the expression it is being compared to.\nwith m.If(a.matches(\"11---\",3,b)): statement1 Is equivelent to\nwith m.Switch(a): with m.Case(\"11---\",3,b): statement1 ","description":"","tags":null,"title":"[Day03] Branching","uri":"/posts/day03/"},{"categories":null,"content":"Domains A domain in its basic definition, is a grouping of logic cells. If consider a module as a blackbox. With its inputs and outputs, any given output is generated within one and only one domain.\nModules come with two domain built in: a combinational domain and a sequential(synchronous) domain.\nCombinational Logic that contains no clocked elements is called combinational logic. This is one of the domain that a Module contains. It is always named comb, and it can be accessed via m.d.comb.\nm means Module and d means domain.\nSynchronous Logic that contains clocked elements is called synchronous (a.k.a sequential circuit) because all the FFs are triggered by particular clock domain. Each clock domain also has a reset signal which can reset all FFs to a given state. Finally, the domain specifies the edge of its clock on which all the FFs change: posedge or negedge.\nUnless otherwise specified, there is one synchronous domain in a Module called sync. It can be accessed via m.d.sync.\nCreating more domains There is no reason to create combinational domains. As mentioned above, modules already contain one combinational domain, comb.\nYou can create a synchronous clock domain using ClockDomain(\"\u003cdomain-name\u003e\", clk_edge=\"pos|neg\"). This gives you both the clock and the reset signal for the domain. By default, the domain name is sync and the clock edge is pos.\nm = Module() mydomain = ClockDomain(\"clk\") m.domains += mydomain m.d.mydomain += ... # logic to add in the \"mydomain\" clock domain. You can access a domain within a module by its name. So a domain created via ClockDomain(“my clock”) is accessed via m.d.myclock or m.d[\"myclk\"]. \\\n ClockSignal(domain=\"\u003cdomain\u003e\") gives you the clock signal for the given domain. ResetSignal(domain=\"\u003cdomain\u003e\") gives you the reset signal for the given domain.  Tips: Clock domains with the same clock but different edges. This can be done simply by creating one clockdomain\npos = ClockDomain(\"pos\") neg = ClockDomain(\"neg\", clk_edge=\"neg\") Next, assign them with same clock driven\nneg.clk = pos.clk neg.rst = pos.rst And then you can add these to the module. We can add more than domain to a module with the same statement.\nm.domains += [pos, neg] Access to domains A module can access its domains via its d attribute. By default, if a synchronous domain is added to a module’s domain, then all modules everywhere will also have access to that domain via their d attribute, even if that module is not a submodule of the module where the domain was added.\nm = Module() m2 = Module() m.domains += ClockDomain(\"thing\") m.d.thing += # logic # This is implicity m2.d.thing += #logic If you want to explicitly inhibit this global propagation by setting the local named parameter of the ClockDomain to True.\nm = Module() m2 = Module() m.domains += ClockDomain(\"thing\", local=True) m.d.thing += # logic # Error will occur here. m2.d.thing += # logic Ports The equivalent of ports in a module is public attributes. In the following example, a and data are publicly available to other modules, while b is not, just as a and data are publicly available to other python classes, and b is not.\nclass ThingBlock(Elaboratable): def __init__(self): # Public accessible self.a = Signal() self.data = Signal(8) def elaborate(self, platform: str): m = Module() # Internal use reg/wire. b = Signal() return m Reset/default values for signals If a Signal is set in the combinational or synchronous domain, then you can specify the default value of the signal if it is not set. By default value of the signal if it is not set. By default, it is zero, but for a non-zero value, you can specify the default value for a signal when constructing the signal by setting the reset named parameter in the constructor. For example, this create a 16-bit signed signal, self.x, which initial value set to 0xFFFF.\nself.x = Signal(signed(16), reset=0xFFFF) # initial value \"0xFFFF\" Explicitly not resetting For synchronous signals(that is, a signal set in a synchronous domain), you can specify that it is not reset on the reset signal, instead only getting an initial balue on power-up. This is done by setting the reset_less named parameter in the constructor to True\nself.x = Signal(signed(16),reset= 0xFFFF, reset_less = True) This is especially useful during simulation or formal verification where you want to activate the reset, but keep some signals “outside” the reset. For example, a cycle counter that maintains its count across resets.\nBasic operations Statements nMigen doesn’t convert Python to hardware. In essence, what you are writing using nMigen is a generator of logic, not the logic itself. So if you want to assign one Value to take the value of another, you don’t write a = b, but instead you call the method of a that generates the equality: a.eq(b). This is known as a statement.\nHowever, many math operators are overridable in Python, since these translate to calls to Python functions. So for example, you can write a.eq(b+1) instead of something like a.eq(b.plus(1)) because Python addition can be overrideen to a function callm and nMigen’s Signal class does that for all such operators (= is still not overrided).\nList of directly translatable Python operators    Operator Operation Notes     ~ inversion    - arithmetic negation    + addition    * multiplication    % modulus    // division integer division, rounding down   \u003c\u003c shift left    \u003e\u003e shift right Effectively arithmetic, see below.   \u0026 bitwise and    ` ` bitwise or   ^ bitwise xor    == equality    != inequality    \u003e greater than    \u003e= greater than or equal to    \u003c less than    \u003c= less than equal to      Note that there are no translatable Python logical operators (and,or). The logical reduction functions any and all are not avaliable in nMigen expressions.\nAttemped to convert nMigen value to boolean error will occur.\n  Shift right is effectively arithmetic, where the sign bit is present for signed values or zero for unsigned Values.\n Effects of operations on result width Two unsigned/signed 4-bit signals addition will result in unsigned/signed 5-bit result.\n\u003e\u003e\u003e s1 = Signal(signed(4)) \u003e\u003e\u003e s2 = Signal(signed(4)) \u003e\u003e\u003e v2 = s1 + s2 \u003e\u003e\u003e v2.shape() Shape(width=5, signed=True) Multiplexing signals Mux() returns one signal if the condition is true, the other signal otherwise:\ny.eq(Mux(cond,x1,x2)) In this case, if cond is true then y is set to x1, otherwise x2. It is the same as y = cond?x1:x2;.\nMux cannot be used on the left-hand side of any assignment.\nPlacing statements in domains Statements are written in the combinational domain of a module as we used to in verilog. Ofcourse, can be used in sequential circuits.\n# Combinational circuit m.d.comb += x.eq(y+1) # Sequential circuit m.d.sync += x.eq(y+1) For example, y is IDLE and x is next_state.\nAdding multiple statements The += operator for a domain can take one statement, or a list of statements, which is pretty ease to use.\nm.d.comb += [ x.eq(y+1), z.eq(w+2) ] Conflict statements will be override If a statement sets the same signal that previous statement set, the the second set takes precedence.\nm.d.comb += x.eq(y+1) m.d.comb += x.eq(y+2) In this case, x will get y+2 not y+1. Remember that one signal can only be assigned to one domains, otherwise, it will result in a driver-driver conflict.\n# Wrong code m.d.comb += x.eq(y+1) m.d.sync += x.eq(y+1) ","description":"","tags":null,"title":"[Day02] Basic terminology","uri":"/posts/day02/"},{"categories":null,"content":"Basic structure of modules The tutorial is followed by https://github.com/RobertBaruch/nmigen-tutorial/ Thumbs up for his contributions.\nfrom nmigen import * from nmigen.build import Platform class ThingBlock(Elaboratable): def __init__(self): pass def elaborate(self, platform: Platform) -\u003e Module: m = Module() return m Elaborating a module from nmigen.cli import main if __name__== \"__main__\": sync = ClockDomain() block = ThingBlock() m = Module() m.domains += sync m.submodules += block main(m, ports=[sync.clk,sync.rst])  main(module, ports=[], platform=\"\") translate the given module into verilog. This is call elaboration. All elaborate() medthod will have its platform argument set to the given platform like particular chips or evaluation boards.  python3 thing.py generate -t [v|il] \u003e thing.[v|il]  If you encounter any error message, Back to day00 and install the pre-requisties.\n  Choose RTLIL if using yosys.  ","description":"","tags":null,"title":"[Day01] Basic nMigen","uri":"/posts/day01/"},{"categories":null,"content":"第一天接觸nMigen, 先來安裝　nMigen! 安裝Prerequisites sudo apt-get install build-essential clang bison flex libreadline-dev \\ gawk tcl-dev libffi-dev git mercurial graphviz \\ xdot pkg-config python python3 libftdi-dev gperf \\ libboost-program-options-dev autoconf libgmp-dev \\ cmake 安裝有的沒的必備程式 參考 https://symbiyosys.readthedocs.io/en/latest/install.html\n安裝nMigen pip install git+https://github.com/m-labs/nmigen.git pip install git+https://github.com/m-labs/nmigen-boards.git 安裝之後就可以開始學習如何使用nMigen製作電路\nValue in migen Const 永不變 from nmigen import * a = Const(10) a.shape() \u003e\u003e Shape(width=4, signed=False) a = Const(10) a.shape() \u003e\u003e Shape(width=5, signed=True) x = Const(3,range(-5,11)) x.shape() \u003e\u003e Shape(width=5, signed=True) 可以使用Enum 來做常數狀態 from enum import Enum, unique @unique class Func(Enum): NONE = 0 ADD = 1 SUB = 2 MUL = 3 DIV = 4 ... \u003e\u003e\u003e x = Const(2, Func) \u003e\u003e\u003e x.shape() unsigned(3) \u003e\u003e\u003e x = Value.cast(Func.NONE) \u003e\u003e\u003e x const 3'd0 Signal 是 Wire或者reg \u003e\u003e\u003e from nmigen import * \u003e\u003e\u003e A = Signal(signed(8)) \u003e\u003e\u003e A.shape() Shape(width=8, signed=True) \u003e\u003e\u003e x = Signal(range(-5,11)) \u003e\u003e\u003e x.shape() Shape(width=5, signed=True) \u003e\u003e\u003e x = Signal(Func) \u003e\u003e\u003e x (sig x) \u003e\u003e\u003e x = Signal(unsigned(16),name=\"dout\") \u003e\u003e\u003e x.name 'dout'   但是我安裝Miniconda 後整個WSL的ssl都掛了，建議不要安裝\n安裝Miniconda 因為我是用WSL，也沒有GUI，就直接用miniconda就好了。\nwget https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh chmod +x Miniconda3-py39_4.9.2-Linux-x86_64.sh ./Miniconda3-py39_4.9.2-Linux-x86_64.sh  ","description":"","tags":null,"title":"[Day00] nMigen 戰鬥","uri":"/posts/day00/"}]